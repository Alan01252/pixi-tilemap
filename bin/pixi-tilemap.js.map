{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/CanvasTileRenderer.js","src/CompositeRectTileLayer.js","src/GraphicsLayer.js","src/RectTileLayer.js","src/RectTileShader.js","src/SquareTileShader.js","src/TileRenderer.js","src/ZLayer.js","src/index"],"names":[],"mappingsjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-tilemap.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n","var RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    for (var i=0;i<bitmaps.length;i++)\r\n        this.addChild(new RectTileLayer(this.zIndex, bitmaps[i]));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].texture)\r\n        this.children[num].addRect(u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null;\r\n    for (var i=0;i<children.length; i++) {\r\n        if (children[i].texture.baseTexture == texture.baseTexture) {\r\n            layer = children[i];\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n    }\r\n    layer.addRect(texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n","function GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n","function RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, texture) {\r\n    this.texture = texture;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!this.texture || !this.texture.valid) return;\r\n    var points = this.pointsBuf;\r\n    for (var i = 0, n = points.length; i < n; i += 8) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        renderer.context.drawImage(this.texture.baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n    } else {\r\n        //horizontal line on squares\r\n        if (tileWidth % tileHeight === 0) {\r\n            for (var i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    if (!this.texture || !this.texture.valid) return;\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var texture = this.texture.baseTexture;\r\n    renderer.bindTexture(texture, 0);\r\n    var tempSize = this._tempSize = (this._tempSize || [0, 0]);\r\n    tempSize[0] = 1.0 / texture.width;\r\n    tempSize[1] = 1.0 / texture.height;\r\n    shader.uniforms.samplerSize = tempSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 8 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var i;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 8) {\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0];\r\n                arr[sz++] = points[i + 1];\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n            }\r\n        } else {\r\n            var ww = texture.width, hh = texture.height;\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 8) {\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i], v = points[i+1];\r\n                var animX = points[i+6], animY = points[i+7];\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n","function RectTileShader(gl)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        [\r\n            'precision lowp float;',\r\n            'attribute vec4 aVertexPosition;',\r\n            'attribute vec2 aAnim;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n            'uniform vec2 samplerSize;',\r\n            'uniform vec2 animationFrame;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy, 1.0)).xy, 0.0, 1.0);',\r\n            '   vTextureCoord = (aVertexPosition.zw + aAnim * animationFrame ) * samplerSize;',\r\n            '}'\r\n        ].join('\\n'),\r\n        [\r\n            'precision lowp float;',\r\n            'varying vec2 vTextureCoord;',\r\n            'uniform sampler2D uSampler;',\r\n            'void main(void){',\r\n            '   gl_FragColor = texture2D(uSampler, vTextureCoord);',\r\n            '}'\r\n        ].join('\\n')\r\n    );\r\n    this.vertSize = 6;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n","function SquareTileShader(gl) {\r\n    PIXI.Shader.call(this, gl,\r\n        [\r\n            'attribute vec4 aVertexPosition;',\r\n            'attribute vec3 aSize;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n            'uniform vec2 samplerSize;',\r\n            'uniform vec2 animationFrame;',\r\n            'uniform float projectionScale;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying float vSize;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy + aSize.x * 0.5, 1.0)).xy, 0.0, 1.0);',\r\n            '   gl_PointSize = aSize.x * projectionScale;',\r\n            '   vTextureCoord = (aVertexPosition.zw + aSize.yz * animationFrame ) * samplerSize;',\r\n            '   vSize = aSize.x;',\r\n            '}'\r\n        ].join(\"\\n\"),\r\n        [\r\n            'varying vec2 vTextureCoord;',\r\n            'varying float vSize;',\r\n            'uniform vec2 samplerSize;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n            'uniform vec2 pointScale;',\r\n\r\n            'void main(void){',\r\n            '   float margin = 0.5/vSize;',\r\n            '   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));',\r\n            '   gl_FragColor = texture2D(uSampler, ((clamped-0.5) * pointScale + 0.5) * vSize * samplerSize + vTextureCoord);',\r\n            '}'\r\n        ].join('\\n')\r\n    );\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n","var RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader');\r\n\r\n/**\r\n * The default vertex shader source\r\n *\r\n * @static\r\n * @constant\r\n */\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    this.rectShader = new RectTileShader(gl);\r\n    this.squareShader = new SquareTileShader(gl);\r\n    this.indexBuffer = PIXI.glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n};\r\n\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n","function ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n","PIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n"]}