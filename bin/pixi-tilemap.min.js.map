{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/CanvasTileRenderer.js","src/CompositeRectTileLayer.js","src/GraphicsLayer.js","src/RectTileLayer.js","src/RectTileShader.js","src/SquareTileShader.js","src/TileRenderer.js","src/ZLayer.js","src/shaderGenerator.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiTilemap","min","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","CanvasTileRenderer","renderer","tileAnim","PIXI","CanvasRenderer","registerPlugin","CompositeRectTileLayer","Container","apply","arguments","initialize","RectTileLayer","prototype","Object","create","constructor","updateTransform","displayObjectUpdateTransform","zIndex","bitmaps","useSquare","texPerChild","z","shadowColor","Float32Array","setBitmaps","len1","children","len2","Math","ceil","textures","slice","addChild","clear","modificationMarker","addRect","num","v","x","y","tileWidth","tileHeight","addFrame","texture","Texture","fromImage","layer","ind","tex","j","baseTexture","child","push","frame","width","height","renderCanvas","dontUseTransform","wt","worldTransform","context","setTransform","b","c","d","tx","resolution","ty","layers","renderWebGL","shader","gl","plugins","tile","getShader","setObjectRenderer","bindShader","_globalMat","Matrix","_activeRenderTarget","projectionMatrix","copy","append","uniforms","toArray","tempScale","_tempScale","pointScale","projectionScale","abs","animationFrame","isModified","anim","pointsBuf","hasAnim","clearModify","GraphicsLayer","Graphics","transform","IDENTITY","graphics","render","globalAlpha","_webGL","id","dirty","DisplayObject","Array","visible","_tempSize","_tempTexSize","points","fillStyle","x1","y1","x2","y2","w","h","textureId","drawImage","source","fillRect","animX","animY","pb","rectsCount","checkIndexBuffer","len","maxTextures","valid","bindTextures","vb","getVb","vbId","createVb","vbBuffer","vao","bind","vertices","vertPerQuad","vs","stride","byteLength","bk","ArrayBuffer","vbArray","vbInts","Uint32Array","upload","shiftU","shiftV","arr","sz","eps","drawArrays","POINTS","drawElements","TRIANGLES","UNSIGNED_SHORT","RectTileShader","Shader","shaderGenerator","generateFragmentSrc","vertSize","fillSamplers","createVao","addIndex","indexBuffer","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","aFrame","aAnim","aTextureId","SquareTileShader","aSize","TileRenderer","ObjectRenderer","vbs","lastTimeCheck","indices","glCore","vbAutoincrement","SCALE_MODE","SCALE_MODES","DEFAULT","onContextChange","rectShader","squareShader","glTextures","boundSprites","initBounds","tempCanvas","document","createElement","glt","GLTexture","premultiplyAlpha","enableWrapClamp","LINEAR","enableLinearScaling","enableNearestScaling","bs","spr","Sprite","position","_hackSubImage","sprite","baseTex","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texSubImage2D","TEXTURE_2D","format","type","bounds","glts","bindTexture","_activeTextureLocation","checkLeaks","now","Date","old","key","lastTimeAccess","removeVb","start","state","setBlendMode","BLEND_MODES","NORMAL","lastAccessTime","GLBuffer","createVertexBuffer","STREAM_DRAW","stuff","destroy","size","totalIndices","Uint16Array","createIndexBuffer","STATIC_DRAW","WebGLRenderer","ZLayer","tilemap","_previousLayers","cacheIfDirty","modified","buf","canvasBuffer","tempRender","_tempRender","view","rootContext","_layerWidth","_layerHeight","_lastAnimationFrame","_hackRenderer","clearRect","layerTransform","sampleValues","uSamplers","samplerSize","uSamplerSize","fragmentSrc","replace","generateSampleSrc","src"],"mappings":"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","file":"pixi-tilemap.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n","var RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function (zIndex, bitmaps, useSquare, texPerChild) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    this.shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    this.texPerChild = texPerChild || 16;\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function (bitmaps) {\r\n    var texPerChild = this.texPerChild;\r\n    var len1 = this.children.length;\r\n    var len2 = Math.ceil(bitmaps.length / texPerChild);\r\n    var i;\r\n    for (i = 0; i < len1; i++) {\r\n        this.children[i].textures = bitmaps.slice(i * texPerChild, (i + 1) * texPerChild);\r\n    }\r\n    for (i = len1; i < len2; i++) {\r\n        this.addChild(new RectTileLayer(this.zIndex, bitmaps.slice(i * texPerChild, (i + 1) * texPerChild)));\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i = 0; i < this.children.length; i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].textures)\r\n        this.children[num].addRect(0, u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null, ind = 0;\r\n    for (var i = 0; i < children.length; i++) {\r\n        var tex = children[i].textures;\r\n        for (var j = 0; j < tex.length; j++) {\r\n            if (tex[j].baseTexture == texture.baseTexture) {\r\n                layer = children[i];\r\n                ind = j;\r\n                break;\r\n            }\r\n        }\r\n        if (layer) {\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        for (i = 0; i < children.length; i++) {\r\n            var child = children[i];\r\n            if (child.textures.length < 16) {\r\n                layer = child;\r\n                ind = child.textures.length;\r\n                child.textures.push(texture);\r\n            }\r\n        }\r\n        if (!layer) {\r\n            children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n            ind = 0;\r\n        }\r\n    }\r\n    layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function (renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    shader.uniforms.shadowColor = this.shadowColor;\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0 ? 1 : -1;\r\n        tempScale[1] = this._globalMat.d < 0 ? 1 : -1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function (anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i = 0; i < layers.length; i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function () {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n","function GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n","function RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, textures) {\r\n    if (!textures) {\r\n        textures = [];\r\n    } else if (!(textures instanceof Array) && textures.baseTexture) {\r\n        textures = [textures];\r\n    }\r\n    this.textures = textures;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n    this._tempSize = new Float32Array([0, 0]);\r\n    this._tempTexSize = 1;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (this.textures.length === 0) return;\r\n    var points = this.pointsBuf;\r\n    renderer.context.fillStyle = '#000000';\r\n    for (var i = 0, n = points.length; i < n; i += 9) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        var textureId = points[i+8];\r\n        if (textureId >= 0) {\r\n            renderer.context.drawImage(this.textures[textureId].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n        } else {\r\n            renderer.context.globalAlpha = 0.5;\r\n            renderer.context.fillRect(x2, y2, w, h);\r\n            renderer.context.globalAlpha = 1;\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (textureId, u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureId);\r\n    } else {\r\n        var i;\r\n        if (tileWidth % tileHeight === 0) {\r\n            //horizontal line on squares\r\n            for (i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else if (tileHeight % tileWidth === 0) {\r\n            //vertical line on squares\r\n            for (i=0;i<tileHeight/tileWidth;i++) {\r\n                pb.push(u);\r\n                pb.push(v + i * tileWidth);\r\n                pb.push(x);\r\n                pb.push(y + i * tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n            pb.push(textureId);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n    var rectsCount = points.length / 9;\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    if (!useSquare) {\r\n        tile.checkIndexBuffer(rectsCount);\r\n    }\r\n\r\n    var shader = tile.getShader(useSquare);\r\n    var textures = this.textures;\r\n    if (textures.length === 0) return;\r\n    var len = textures.length;\r\n    if (this._tempTexSize < shader.maxTextures) {\r\n        this._tempTexSize = shader.maxTextures;\r\n        this._tempSize = new Float32Array(2*shader.maxTextures);\r\n    }\r\n    // var samplerSize = this._tempSize;\r\n    for (var i=0;i<len;i++) {\r\n        if (!textures[i] || !textures[i].valid) return;\r\n        var texture = textures[i].baseTexture;\r\n        // samplerSize[i * 2] = 1.0 / texture.width;\r\n        // samplerSize[i * 2 + 1] = 1.0 / texture.height;\r\n    }\r\n    tile.bindTextures(renderer, textures);\r\n    // shader.uniforms.uSamplerSize = samplerSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = rectsCount * shader.vertPerQuad;\r\n    if (vertices === 0) return;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var textureId, shiftU, shiftV;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0] + shiftU;\r\n                arr[sz++] = points[i + 1] + shiftV;\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n                arr[sz++] = textureId;\r\n            }\r\n        } else {\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 9) {\r\n                var eps = 0.5;\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i] + shiftU, v = points[i+1] + shiftV;\r\n                var animX = points[i+6], animY = points[i+7];\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = u + eps;\r\n                arr[sz++] = v + eps;\r\n                arr[sz++] = u + w - eps;\r\n                arr[sz++] = v + h - eps;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawElements(gl.TRIANGLES, rectsCount * 6, gl.UNSIGNED_SHORT, 0);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n","var shaderGenerator = require('./shaderGenerator');\r\n\r\nfunction RectTileShader(gl, maxTextures)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aFrame;\\nattribute vec2 aAnim;\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\nuniform vec2 animationFrame;\\n\\nvarying vec2 vTextureCoord;\\nvarying float vTextureId;\\nvarying vec4 vFrame;\\n\\nvoid main(void){\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vec2 anim = aAnim * animationFrame;\\n   vTextureCoord = aTextureCoord + anim;\\n   vFrame = aFrame + vec4(anim, anim);\\n   vTextureId = aTextureId;\\n}\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vFrame;\\nvarying float vTextureId;\\nuniform vec4 shadowColor;\\nuniform sampler2D uSamplers[%count%];\\nuniform vec2 uSamplerSize[%count%];\\n\\nvoid main(void){\\n   vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\\n   float textureId = floor(vTextureId + 0.5);\\n\\n   vec4 color;\\n   %forloop%\\n   gl_FragColor = color;\\n}\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 11;\r\n    this.vertPerQuad = 4;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aFrame, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 8 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 10 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n","var shaderGenerator = require('./shaderGenerator');\r\n\r\n\r\nfunction SquareTileShader(gl, maxTextures) {\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec2 aAnim;\\nattribute float aTextureId;\\nattribute float aSize;\\n\\nuniform mat3 projectionMatrix;\\nuniform vec2 samplerSize;\\nuniform vec2 animationFrame;\\nuniform float projectionScale;\\n\\nvarying vec2 vTextureCoord;\\nvarying float vSize;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\\n   gl_PointSize = aSize * projectionScale;\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n   vTextureId = aTextureId;\\n   vSize = aSize;\\n}\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying float vSize;\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\nuniform sampler2D uSamplers[%count%];\\nuniform vec2 uSamplerSize[%count%];\\nuniform vec2 pointScale;\\n\\nvoid main(void){\\n   float margin = 0.5 / vSize;\\n   vec2 pointCoord = (gl_PointCoord - 0.5) * pointScale + 0.5;\\n   vec2 clamped = vec2(clamp(pointCoord.x, margin, 1.0 - margin), clamp(pointCoord.y, margin, 1.0 - margin));\\n   vec2 textureCoord = pointCoord * vSize + vTextureCoord;\\n   float textureId = vTextureId;\\n   vec4 color;\\n   %forloop%\\n   gl_FragColor = color;\\n}\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 8;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 5 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 7 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n","var RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/*\r\n * Renderer for square and rectangle tiles.\r\n * Squares cannot be rotated, skewed.\r\n * For container with squares, scale.x must be equals to scale.y, matrix.a to matrix.d\r\n * Rectangles do not care about that.\r\n *\r\n * @class\r\n * @memberof PIXI.tilemap\r\n * @extends PIXI.ObjectRenderer\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this sprite batch works for.\r\n */\r\n\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.maxTextures = 4;\r\n    this.indices = [];\r\n    this.indexBuffer = null;\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\nTileRenderer.SCALE_MODE = PIXI.SCALE_MODES.DEFAULT;\r\n\r\nTileRenderer.prototype.onContextChange = function () {\r\n    var gl = this.renderer.gl;\r\n    var maxTextures = this.maxTextures;\r\n    this.rectShader = new RectTileShader(gl, maxTextures);\r\n    this.squareShader = new SquareTileShader(gl, maxTextures);\r\n    this.checkIndexBuffer(2000);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n    this.glTextures = [];\r\n    this.boundSprites = [];\r\n    this.initBounds();\r\n};\r\n\r\nTileRenderer.prototype.initBounds = function () {\r\n    var gl = this.renderer.gl;\r\n    var tempCanvas = document.createElement('canvas');\r\n    tempCanvas.width = 2048;\r\n    tempCanvas.height = 2048;\r\n    // tempCanvas.getContext('2d').clearRect(0, 0, 2048, 2048);\r\n    for (var i = 0; i < this.maxTextures; i++) {\r\n        var glt = new glCore.GLTexture(gl, 2048, 2048);\r\n        glt.premultiplyAlpha = true;\r\n        glt.upload(tempCanvas);\r\n        glt.enableWrapClamp();\r\n\r\n        if (TileRenderer.SCALE_MODE === PIXI.SCALE_MODES.LINEAR) {\r\n            glt.enableLinearScaling();\r\n        } else {\r\n            glt.enableNearestScaling();\r\n        }\r\n\r\n        this.glTextures.push(glt);\r\n        var bs = [];\r\n        for (var j = 0; j < 4; j++) {\r\n            var spr = new PIXI.Sprite();\r\n            spr.position.x = 1024 * (j & 1);\r\n            spr.position.y = 1024 * (j >> 1);\r\n            bs.push(spr);\r\n        }\r\n        this.boundSprites.push(bs);\r\n    }\r\n};\r\n\r\nglCore.GLTexture.prototype._hackSubImage = function (sprite) {\r\n    this.bind();\r\n    var gl = this.gl;\r\n    var baseTex = sprite.texture.baseTexture;\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, sprite.position.x, sprite.position.y, this.format, this.type, baseTex.source);\r\n};\r\n\r\nTileRenderer.prototype.bindTextures = function (renderer, textures) {\r\n    var bounds = this.boundSprites;\r\n    var glts = this.glTextures;\r\n    var len = textures.length;\r\n    var maxTextures = this.maxTextures;\r\n    if (len >= 4 * maxTextures) {\r\n        return;\r\n    }\r\n    var i;\r\n    for (i = 0; i < len; i++) {\r\n        var texture = textures[i];\r\n        renderer.bindTexture(texture);\r\n        if (!texture || !textures[i].valid) continue;\r\n        var bs = bounds[i >> 2][i & 3];\r\n        if (!bs.texture ||\r\n            bs.texture.baseTexture !== texture.baseTexture) {\r\n            bs.texture = texture;\r\n            var glt = glts[i >> 2];\r\n            glt._hackSubImage(bs);\r\n        }\r\n    }\r\n    for (i = 0; i < maxTextures; i++) {\r\n        glts[i].bind(i);\r\n    }\r\n    renderer._activeTextureLocation = maxTextures - 1;\r\n};\r\n\r\nTileRenderer.prototype.checkLeaks = function () {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function () {\r\n    this.renderer.state.setBlendMode(PIXI.BLEND_MODES.NORMAL);\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function (id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function (useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function (id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.checkIndexBuffer = function (size) {\r\n    // the total number of indices in our array, there are 6 points per quad.\r\n    var totalIndices = size * 6;\r\n    var indices = this.indices;\r\n    if (totalIndices <= indices.length) {\r\n        return;\r\n    }\r\n    var len = indices.length || totalIndices;\r\n    while (len < totalIndices) {\r\n        len <<= 1;\r\n    }\r\n\r\n    indices = new Uint16Array(len);\r\n    this.indices = indices;\r\n\r\n    // fill the indices with the quads to draw\r\n    for (var i = 0, j = 0; i + 5 < indices.length; i += 6, j += 4) {\r\n        indices[i + 0] = j + 0;\r\n        indices[i + 1] = j + 1;\r\n        indices[i + 2] = j + 2;\r\n        indices[i + 3] = j + 0;\r\n        indices[i + 4] = j + 2;\r\n        indices[i + 5] = j + 3;\r\n    }\r\n\r\n    if (this.indexBuffer) {\r\n        this.indexBuffer.upload(indices);\r\n    } else {\r\n        var gl = this.renderer.gl;\r\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function (useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n","function ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n","var shaderGenerator = {\r\n    fillSamplers: function(shader, maxTextures) {\r\n        var sampleValues = [];\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            sampleValues[i] = i;\r\n        }\r\n        shader.bind();\r\n        shader.uniforms.uSamplers = sampleValues;\r\n\r\n        var samplerSize = [];\r\n        for (i = 0; i < maxTextures; i++) {\r\n            samplerSize.push(1.0 / 2048);\r\n            samplerSize.push(1.0 / 2048);\r\n        }\r\n        shader.uniforms.uSamplerSize = samplerSize;\r\n    },\r\n    generateFragmentSrc: function(maxTextures, fragmentSrc) {\r\n        return fragmentSrc.replace(/%count%/gi, maxTextures)\r\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\r\n    },\r\n    generateSampleSrc: function(maxTextures) {\r\n        var src = '';\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        src += 'if(vTextureId <= -1.0) {';\r\n        src += '\\n\\tcolor = shadowColor;';\r\n        src += '\\n}';\r\n\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            src += '\\nelse ';\r\n\r\n            if(i < maxTextures-1)\r\n            {\r\n                src += 'if(textureId == ' + i + '.0)';\r\n            }\r\n\r\n            src += '\\n{';\r\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\r\n            src += '\\n}';\r\n        }\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        return src;\r\n    }\r\n};\r\n\r\nmodule.exports = shaderGenerator;\r\n","PIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n"],"sourceRoot":"/source/"}