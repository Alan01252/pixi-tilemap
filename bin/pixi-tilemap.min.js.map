{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/CanvasTileRenderer.js","pixi-tilemap.min.js","src/CompositeRectTileLayer.js","src/GraphicsLayer.js","src/RectTileLayer.js","src/RectTileShader.js","src/SquareTileShader.js","src/TileRenderer.js","src/ZLayer.js","src/index","src/shaderGenerator.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","CanvasTileRenderer","renderer","this","tileAnim","PIXI","CanvasRenderer","registerPlugin","2","CompositeRectTileLayer","Container","apply","arguments","initialize","RectTileLayer","prototype","Object","create","constructor","updateTransform","displayObjectUpdateTransform","zIndex","bitmaps","useSquare","z","shadowColor","Float32Array","setBitmaps","removeChildren","addChild","modificationMarker","clear","children","addRect","num","v","x","y","tileWidth","tileHeight","texture","addFrame","Texture","fromImage","layer","baseTexture","push","frame","width","height","renderCanvas","dontUseTransform","wt","worldTransform","context","setTransform","b","c","d","tx","resolution","ty","layers","renderWebGL","shader","gl","plugins","tile","getShader","setObjectRenderer","bindShader","_globalMat","Matrix","_activeRenderTarget","projectionMatrix","copy","append","uniforms","toArray","tempScale","_tempScale","pointScale","projectionScale","Math","abs","animationFrame","isModified","anim","pointsBuf","hasAnim","clearModify","./RectTileLayer","3","GraphicsLayer","Graphics","transform","IDENTITY","graphics","render","globalAlpha","_webGL","id","dirty","4","DisplayObject","textures","Array","visible","_tempSize","_tempTexSize","points","fillStyle","x1","y1","x2","y2","w","h","textureId","drawImage","source","fillRect","animX","animY","pb","len","maxTextures","valid","bindTextures","vb","getVb","vbId","createVb","vbBuffer","vao","bind","vertices","vertPerQuad","vs","stride","byteLength","bk","ArrayBuffer","vbArray","vbInts","Uint32Array","upload","shiftU","shiftV","arr","sz","drawArrays","POINTS","TRIANGLES","5","RectTileShader","Shader","shaderGenerator","generateFragmentSrc","vertSize","fillSamplers","createVao","addIndex","indexBuffer","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","aAnim","aTextureId","./shaderGenerator","6","SquareTileShader","aSize","7","TileRenderer","ObjectRenderer","vbs","lastTimeCheck","indices","Uint16Array","glCore","vbAutoincrement","onContextChange","rectShader","squareShader","GLBuffer","createIndexBuffer","STATIC_DRAW","glTextures","boundSprites","initBounds","tempCanvas","document","createElement","glt","GLTexture","premultiplyAlpha","enableWrapClamp","enableLinearScaling","bs","j","spr","Sprite","position","_hackSubImage","sprite","baseTex","texSubImage2D","TEXTURE_2D","format","type","bounds","glts","_activeTextureLocation","checkLeaks","now","Date","old","key","lastTimeAccess","removeVb","start","state","setBlendMode","BLEND_MODES","NORMAL","lastAccessTime","createVertexBuffer","STREAM_DRAW","stuff","destroy","WebGLRenderer","./RectTileShader","./SquareTileShader","8","ZLayer","tilemap","_previousLayers","cacheIfDirty","modified","buf","canvasBuffer","tempRender","_tempRender","view","rootContext","_layerWidth","_layerHeight","_lastAnimationFrame","_hackRenderer","clearRect","layerTransform","9","./CanvasTileRenderer","./CompositeRectTileLayer","./GraphicsLayer","./TileRenderer","./ZLayer","10","sampleValues","uSamplers","samplerSize","uSamplerSize","fragmentSrc","replace","generateSampleSrc","src"],"mappings":"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","file":"pixi-tilemap.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nfunction CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n\n},{}],2:[function(require,module,exports){\nvar RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    this.shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    this.addChild(new RectTileLayer(this.zIndex, bitmaps));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].texture)\r\n        this.children[num].addRect(u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null;\r\n    for (var i=0;i<children.length; i++) {\r\n        if (children[i].texture.baseTexture == texture.baseTexture) {\r\n            layer = children[i];\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n    }\r\n    layer.addRect(texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    shader.uniforms.shadowColor = this.shadowColor;\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n\n},{\"./RectTileLayer\":4}],3:[function(require,module,exports){\nfunction GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n\n},{}],4:[function(require,module,exports){\nfunction RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, textures) {\r\n    if (!textures) {\r\n        textures = [];\r\n    } else if (!(textures instanceof Array) && textures.baseTexture) {\r\n        textures = [textures];\r\n    }\r\n    this.textures = textures;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n    this._tempSize = new Float32Array([0, 0]);\r\n    this._tempTexSize = 1;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (this.textures.length === 0) return;\r\n    var points = this.pointsBuf;\r\n    renderer.context.fillStyle = '#000000';\r\n    for (var i = 0, n = points.length; i < n; i += 9) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        var textureId = points[i+8];\r\n        if (textureId >= 0) {\r\n            renderer.context.drawImage(this.textures[textureId].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n        } else {\r\n            renderer.context.globalAlpha = 0.5;\r\n            renderer.context.fillRect(x2, y2, w, h);\r\n            renderer.context.globalAlpha = 1;\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (textureId, u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureId);\r\n    } else {\r\n        var i;\r\n        if (tileWidth % tileHeight === 0) {\r\n            //horizontal line on squares\r\n            for (i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else if (tileHeight % tileWidth === 0) {\r\n            //vertical line on squares\r\n            for (i=0;i<tileHeight/tileWidth;i++) {\r\n                pb.push(u);\r\n                pb.push(v + i * tileWidth);\r\n                pb.push(x);\r\n                pb.push(y + i * tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n            pb.push(textureId);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var textures = this.textures;\r\n    if (textures.length === 0) return;\r\n    var len = textures.length;\r\n    if (this._tempTexSize < shader.maxTextures) {\r\n        this._tempTexSize = shader.maxTextures;\r\n        this._tempSize = new Float32Array(2*shader.maxTextures);\r\n    }\r\n    // var samplerSize = this._tempSize;\r\n    for (var i=0;i<len;i++) {\r\n        if (!textures[i] || !textures[i].valid) return;\r\n        var texture = textures[i].baseTexture;\r\n        // samplerSize[i * 2] = 1.0 / texture.width;\r\n        // samplerSize[i * 2 + 1] = 1.0 / texture.height;\r\n    }\r\n    tile.bindTextures(renderer, textures);\r\n    // shader.uniforms.uSamplerSize = samplerSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 9 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var textureId, shiftU, shiftV;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0] + shiftU;\r\n                arr[sz++] = points[i + 1] + shiftV;\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n                arr[sz++] = textureId;\r\n            }\r\n        } else {\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i] + shiftU, v = points[i+1] + shiftV;\r\n                var animX = points[i+6], animY = points[i+7];\r\n                textureId >>= 2;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n\n},{}],5:[function(require,module,exports){\nvar shaderGenerator = require('./shaderGenerator');\r\n\r\nfunction RectTileShader(gl, maxTextures)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 animationFrame;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nvoid main(void){\\n\\n   vec2 textureCoord = vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 6 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n\n},{\"./shaderGenerator\":10}],6:[function(require,module,exports){\nvar shaderGenerator = require('./shaderGenerator');\r\n\r\n\r\nfunction SquareTileShader(gl, maxTextures) {\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nattribute float aSize;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 samplerSize;\\n\\nuniform vec2 animationFrame;\\n\\nuniform float projectionScale;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\\n\\n   gl_PointSize = aSize * projectionScale;\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n   vSize = aSize;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nuniform vec2 pointScale;\\n\\nvoid main(void){\\n\\n   float margin = 0.5/vSize;\\n\\n   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));\\n\\n   vec2 textureCoord = ((clamped-0.5) * pointScale + 0.5) * vSize + vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 8;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 5 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 7 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n\n},{\"./shaderGenerator\":10}],7:[function(require,module,exports){\nvar RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/**\r\n * The default vertex shader source\r\n *\r\n * @static\r\n * @constant\r\n */\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.maxTextures = 4;\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    var maxTextures = this.maxTextures;\r\n    this.rectShader = new RectTileShader(gl, maxTextures);\r\n    this.squareShader = new SquareTileShader(gl, maxTextures);\r\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n    this.glTextures = [];\r\n    this.boundSprites = [];\r\n    this.initBounds();\r\n};\r\n\r\nTileRenderer.prototype.initBounds = function() {\r\n    var gl = this.renderer.gl;\r\n    var tempCanvas = document.createElement('canvas');\r\n    tempCanvas.width = 2048;\r\n    tempCanvas.height = 2048;\r\n    // tempCanvas.getContext('2d').clearRect(0, 0, 2048, 2048);\r\n    for (var i=0;i<this.maxTextures; i++) {\r\n        var glt = new glCore.GLTexture(gl, 2048, 2048);\r\n        glt.premultiplyAlpha = true;\r\n        glt.upload(tempCanvas);\r\n        glt.enableWrapClamp();\r\n        glt.enableLinearScaling();\r\n        this.glTextures.push(glt);\r\n        var bs = [];\r\n        for (var j=0;j<4;j++) {\r\n            var spr = new PIXI.Sprite();\r\n            spr.position.x = 1024 * (j & 1);\r\n            spr.position.y = 1024 * (j >> 1);\r\n            bs.push(spr);\r\n        }\r\n        this.boundSprites.push(bs);\r\n    }\r\n};\r\n\r\nglCore.GLTexture.prototype._hackSubImage = function(sprite) {\r\n    this.bind();\r\n    var gl = this.gl;\r\n    var baseTex = sprite.texture.baseTexture;\r\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, sprite.position.x, sprite.position.y, this.format, this.type, baseTex.source);\r\n};\r\n\r\nTileRenderer.prototype.bindTextures = function(renderer, textures) {\r\n    var bounds = this.boundSprites;\r\n    var glts = this.glTextures;\r\n    var len = textures.length;\r\n    var maxTextures = this.maxTextures;\r\n    if (len >= 4 * maxTextures) {\r\n        return;\r\n    }\r\n    var i;\r\n    for (i=0;i<len;i++) {\r\n        var texture = textures[i];\r\n        if (!texture || !textures[i].valid) continue;\r\n        var bs = bounds[i >> 2][i & 3];\r\n        if (bs.texture !== texture) {\r\n            bs.texture = texture;\r\n            var glt = glts[ i >> 2 ];\r\n            glt._hackSubImage(bs);\r\n        }\r\n    }\r\n    for (i = 0; i < maxTextures; i++) {\r\n        glts[i].bind(i);\r\n    }\r\n    renderer._activeTextureLocation = maxTextures - 1;\r\n};\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n\n},{\"./RectTileShader\":5,\"./SquareTileShader\":6}],8:[function(require,module,exports){\nfunction ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n\n},{}],9:[function(require,module,exports){\nPIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n\n},{\"./CanvasTileRenderer\":1,\"./CompositeRectTileLayer\":2,\"./GraphicsLayer\":3,\"./RectTileLayer\":4,\"./TileRenderer\":7,\"./ZLayer\":8}],10:[function(require,module,exports){\nvar shaderGenerator = {\r\n    fillSamplers: function(shader, maxTextures) {\r\n        var sampleValues = [];\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            sampleValues[i] = i;\r\n        }\r\n        shader.bind();\r\n        shader.uniforms.uSamplers = sampleValues;\r\n\r\n        var samplerSize = [];\r\n        for (i = 0; i < maxTextures; i++) {\r\n            samplerSize.push(1.0 / 2048);\r\n            samplerSize.push(1.0 / 2048);\r\n        }\r\n        shader.uniforms.uSamplerSize = samplerSize;\r\n    },\r\n    generateFragmentSrc: function(maxTextures, fragmentSrc) {\r\n        return fragmentSrc.replace(/%count%/gi, maxTextures)\r\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\r\n    },\r\n    generateSampleSrc: function(maxTextures) {\r\n        var src = '';\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        src += 'if(vTextureId <= -1.0) {';\r\n        src += '\\n\\tcolor = shadowColor;';\r\n        src += '\\n}';\r\n\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            src += '\\nelse ';\r\n\r\n            if(i < maxTextures-1)\r\n            {\r\n                src += 'if(vTextureId == ' + i + '.0)';\r\n            }\r\n\r\n            src += '\\n{';\r\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\r\n            src += '\\n}';\r\n        }\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        return src;\r\n    }\r\n};\r\n\r\nmodule.exports = shaderGenerator;\r\n\n},{}]},{},[9])\n\n","var RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    this.shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    this.addChild(new RectTileLayer(this.zIndex, bitmaps));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].texture)\r\n        this.children[num].addRect(u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null;\r\n    for (var i=0;i<children.length; i++) {\r\n        if (children[i].texture.baseTexture == texture.baseTexture) {\r\n            layer = children[i];\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n    }\r\n    layer.addRect(texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    shader.uniforms.shadowColor = this.shadowColor;\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n","function GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n","function RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, textures) {\r\n    if (!textures) {\r\n        textures = [];\r\n    } else if (!(textures instanceof Array) && textures.baseTexture) {\r\n        textures = [textures];\r\n    }\r\n    this.textures = textures;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n    this._tempSize = new Float32Array([0, 0]);\r\n    this._tempTexSize = 1;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (this.textures.length === 0) return;\r\n    var points = this.pointsBuf;\r\n    renderer.context.fillStyle = '#000000';\r\n    for (var i = 0, n = points.length; i < n; i += 9) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        var textureId = points[i+8];\r\n        if (textureId >= 0) {\r\n            renderer.context.drawImage(this.textures[textureId].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n        } else {\r\n            renderer.context.globalAlpha = 0.5;\r\n            renderer.context.fillRect(x2, y2, w, h);\r\n            renderer.context.globalAlpha = 1;\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (textureId, u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureId);\r\n    } else {\r\n        var i;\r\n        if (tileWidth % tileHeight === 0) {\r\n            //horizontal line on squares\r\n            for (i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else if (tileHeight % tileWidth === 0) {\r\n            //vertical line on squares\r\n            for (i=0;i<tileHeight/tileWidth;i++) {\r\n                pb.push(u);\r\n                pb.push(v + i * tileWidth);\r\n                pb.push(x);\r\n                pb.push(y + i * tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n            pb.push(textureId);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var textures = this.textures;\r\n    if (textures.length === 0) return;\r\n    var len = textures.length;\r\n    if (this._tempTexSize < shader.maxTextures) {\r\n        this._tempTexSize = shader.maxTextures;\r\n        this._tempSize = new Float32Array(2*shader.maxTextures);\r\n    }\r\n    // var samplerSize = this._tempSize;\r\n    for (var i=0;i<len;i++) {\r\n        if (!textures[i] || !textures[i].valid) return;\r\n        var texture = textures[i].baseTexture;\r\n        // samplerSize[i * 2] = 1.0 / texture.width;\r\n        // samplerSize[i * 2 + 1] = 1.0 / texture.height;\r\n    }\r\n    tile.bindTextures(renderer, textures);\r\n    // shader.uniforms.uSamplerSize = samplerSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 9 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var textureId, shiftU, shiftV;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0] + shiftU;\r\n                arr[sz++] = points[i + 1] + shiftV;\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n                arr[sz++] = textureId;\r\n            }\r\n        } else {\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i] + shiftU, v = points[i+1] + shiftV;\r\n                var animX = points[i+6], animY = points[i+7];\r\n                textureId >>= 2;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n","var shaderGenerator = require('./shaderGenerator');\r\n\r\nfunction RectTileShader(gl, maxTextures)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 animationFrame;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nvoid main(void){\\n\\n   vec2 textureCoord = vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 6 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n","var shaderGenerator = require('./shaderGenerator');\r\n\r\n\r\nfunction SquareTileShader(gl, maxTextures) {\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nattribute float aSize;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 samplerSize;\\n\\nuniform vec2 animationFrame;\\n\\nuniform float projectionScale;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\\n\\n   gl_PointSize = aSize * projectionScale;\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n   vSize = aSize;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nuniform vec2 pointScale;\\n\\nvoid main(void){\\n\\n   float margin = 0.5/vSize;\\n\\n   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));\\n\\n   vec2 textureCoord = ((clamped-0.5) * pointScale + 0.5) * vSize + vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 8;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 5 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 7 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n","var RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/**\r\n * The default vertex shader source\r\n *\r\n * @static\r\n * @constant\r\n */\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.maxTextures = 4;\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    var maxTextures = this.maxTextures;\r\n    this.rectShader = new RectTileShader(gl, maxTextures);\r\n    this.squareShader = new SquareTileShader(gl, maxTextures);\r\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n    this.glTextures = [];\r\n    this.boundSprites = [];\r\n    this.initBounds();\r\n};\r\n\r\nTileRenderer.prototype.initBounds = function() {\r\n    var gl = this.renderer.gl;\r\n    var tempCanvas = document.createElement('canvas');\r\n    tempCanvas.width = 2048;\r\n    tempCanvas.height = 2048;\r\n    // tempCanvas.getContext('2d').clearRect(0, 0, 2048, 2048);\r\n    for (var i=0;i<this.maxTextures; i++) {\r\n        var glt = new glCore.GLTexture(gl, 2048, 2048);\r\n        glt.premultiplyAlpha = true;\r\n        glt.upload(tempCanvas);\r\n        glt.enableWrapClamp();\r\n        glt.enableLinearScaling();\r\n        this.glTextures.push(glt);\r\n        var bs = [];\r\n        for (var j=0;j<4;j++) {\r\n            var spr = new PIXI.Sprite();\r\n            spr.position.x = 1024 * (j & 1);\r\n            spr.position.y = 1024 * (j >> 1);\r\n            bs.push(spr);\r\n        }\r\n        this.boundSprites.push(bs);\r\n    }\r\n};\r\n\r\nglCore.GLTexture.prototype._hackSubImage = function(sprite) {\r\n    this.bind();\r\n    var gl = this.gl;\r\n    var baseTex = sprite.texture.baseTexture;\r\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, sprite.position.x, sprite.position.y, this.format, this.type, baseTex.source);\r\n};\r\n\r\nTileRenderer.prototype.bindTextures = function(renderer, textures) {\r\n    var bounds = this.boundSprites;\r\n    var glts = this.glTextures;\r\n    var len = textures.length;\r\n    var maxTextures = this.maxTextures;\r\n    if (len >= 4 * maxTextures) {\r\n        return;\r\n    }\r\n    var i;\r\n    for (i=0;i<len;i++) {\r\n        var texture = textures[i];\r\n        if (!texture || !textures[i].valid) continue;\r\n        var bs = bounds[i >> 2][i & 3];\r\n        if (bs.texture !== texture) {\r\n            bs.texture = texture;\r\n            var glt = glts[ i >> 2 ];\r\n            glt._hackSubImage(bs);\r\n        }\r\n    }\r\n    for (i = 0; i < maxTextures; i++) {\r\n        glts[i].bind(i);\r\n    }\r\n    renderer._activeTextureLocation = maxTextures - 1;\r\n};\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n","function ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n","PIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n","var shaderGenerator = {\r\n    fillSamplers: function(shader, maxTextures) {\r\n        var sampleValues = [];\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            sampleValues[i] = i;\r\n        }\r\n        shader.bind();\r\n        shader.uniforms.uSamplers = sampleValues;\r\n\r\n        var samplerSize = [];\r\n        for (i = 0; i < maxTextures; i++) {\r\n            samplerSize.push(1.0 / 2048);\r\n            samplerSize.push(1.0 / 2048);\r\n        }\r\n        shader.uniforms.uSamplerSize = samplerSize;\r\n    },\r\n    generateFragmentSrc: function(maxTextures, fragmentSrc) {\r\n        return fragmentSrc.replace(/%count%/gi, maxTextures)\r\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\r\n    },\r\n    generateSampleSrc: function(maxTextures) {\r\n        var src = '';\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        src += 'if(vTextureId <= -1.0) {';\r\n        src += '\\n\\tcolor = shadowColor;';\r\n        src += '\\n}';\r\n\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            src += '\\nelse ';\r\n\r\n            if(i < maxTextures-1)\r\n            {\r\n                src += 'if(vTextureId == ' + i + '.0)';\r\n            }\r\n\r\n            src += '\\n{';\r\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\r\n            src += '\\n}';\r\n        }\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        return src;\r\n    }\r\n};\r\n\r\nmodule.exports = shaderGenerator;\r\n"],"sourceRoot":"./"}