{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/CanvasTileRenderer.js","pixi-tilemap.min.js","src/CompositeRectTileLayer.js","src/GraphicsLayer.js","src/RectTileLayer.js","src/RectTileShader.js","src/SquareTileShader.js","src/TileRenderer.js","src/ZLayer.js","src/index"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","CanvasTileRenderer","renderer","this","tileAnim","PIXI","CanvasRenderer","registerPlugin","2","CompositeRectTileLayer","Container","apply","arguments","initialize","RectTileLayer","prototype","Object","create","constructor","updateTransform","displayObjectUpdateTransform","zIndex","bitmaps","useSquare","z","setBitmaps","removeChildren","addChild","modificationMarker","clear","children","addRect","num","v","x","y","tileWidth","tileHeight","texture","addFrame","Texture","fromImage","layer","baseTexture","push","frame","width","height","renderCanvas","dontUseTransform","wt","worldTransform","context","setTransform","b","c","d","tx","resolution","ty","layers","renderWebGL","shader","gl","plugins","tile","getShader","setObjectRenderer","bindShader","_globalMat","Matrix","_activeRenderTarget","projectionMatrix","copy","append","uniforms","toArray","tempScale","_tempScale","pointScale","projectionScale","Math","abs","animationFrame","isModified","anim","pointsBuf","hasAnim","clearModify","./RectTileLayer","3","GraphicsLayer","Graphics","transform","IDENTITY","graphics","render","globalAlpha","_webGL","id","dirty","4","DisplayObject","visible","valid","points","x1","y1","x2","y2","w","h","drawImage","source","animX","animY","pb","bindTexture","tempSize","_tempSize","samplerSize","vb","getVb","vbId","createVb","vbBuffer","vao","bind","vertices","vertPerQuad","vs","stride","byteLength","bk","ArrayBuffer","vbArray","Float32Array","vbInts","Uint32Array","upload","arr","sz","drawArrays","POINTS","TRIANGLES","5","RectTileShader","Shader","join","vertSize","createVao","addIndex","indexBuffer","addAttribute","attributes","aVertexPosition","FLOAT","aAnim","6","SquareTileShader","aSize","7","TileRenderer","ObjectRenderer","vbs","lastTimeCheck","indices","Uint16Array","vbAutoincrement","onContextChange","rectShader","squareShader","glCore","GLBuffer","createIndexBuffer","STATIC_DRAW","checkLeaks","now","Date","old","key","lastTimeAccess","removeVb","start","state","setBlendMode","BLEND_MODES","NORMAL","lastAccessTime","createVertexBuffer","STREAM_DRAW","stuff","destroy","WebGLRenderer","./RectTileShader","./SquareTileShader","8","ZLayer","tilemap","_previousLayers","cacheIfDirty","modified","buf","canvasBuffer","tempRender","_tempRender","document","createElement","view","rootContext","_layerWidth","_layerHeight","_lastAnimationFrame","_hackRenderer","clearRect","layerTransform","9","./CanvasTileRenderer","./CompositeRectTileLayer","./GraphicsLayer","./TileRenderer","./ZLayer"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,QAAAK,GAAAC,GACAC,KAAAD,SAAAA,EACAC,KAAAC,UAAA,EAAA,GAGAC,KAAAC,eAAAC,eAAA,OAAAN,GAEAD,EAAAJ,QAAAK,OCGMO,GAAG,SAASlB,EAAQU,EAAOJ,GCRjC,QAAAa,KACAJ,KAAAK,UAAAC,MAAAR,KAAAS,WACAT,KAAAU,WAAAF,MAAAR,KAAAS,WAJA,GAAAE,GAAAxB,EAAA,kBAOAmB,GAAAM,UAAAC,OAAAC,OAAAZ,KAAAK,UAAAK,WACAN,EAAAM,UAAAG,YAAAJ,EACAL,EAAAM,UAAAI,gBAAAV,EAAAM,UAAAK,6BAGAX,EAAAM,UAAAF,WAAA,SAAAQ,EAAAC,EAAAC,GACApB,KAAAqB,EAAArB,KAAAkB,OAAAA,EACAlB,KAAAoB,UAAAA,EACAD,GACAnB,KAAAsB,WAAAH,IAIAb,EAAAM,UAAAU,WAAA,SAAAH,GACAnB,KAAAuB,gBACA,KAAA,GAAAnC,GAAA,EAAAA,EAAA+B,EAAAxB,OAAAP,IACAY,KAAAwB,SAAA,GAAAb,GAAAX,KAAAkB,OAAAC,EAAA/B,IACAY,MAAAyB,mBAAA,GAGAnB,EAAAM,UAAAc,MAAA,WACA,IAAA,GAAAtC,GAAA,EAAAA,EAAAY,KAAA2B,SAAAhC,OAAAP,IACAY,KAAA2B,SAAAvC,GAAAsC,OACA1B,MAAAyB,mBAAA,GAGAnB,EAAAM,UAAAgB,QAAA,SAAAC,EAAA5C,EAAA6C,EAAAC,EAAAC,EAAAC,EAAAC,GACAlC,KAAA2B,SAAAE,IAAA7B,KAAA2B,SAAAE,GAAAM,SACAnC,KAAA2B,SAAAE,GAAAD,QAAA3C,EAAA6C,EAAAC,EAAAC,EAAAC,EAAAC,IAUA5B,EAAAM,UAAAwB,SAAA,SAAAD,EAAAJ,EAAAC,GACA,gBAAAG,KACAA,EAAAjC,KAAAmC,QAAAC,UAAAH,GAIA,KAAA,GAFAR,GAAA3B,KAAA2B,SACAY,EAAA,KACAnD,EAAA,EAAAA,EAAAuC,EAAAhC,OAAAP,IACA,GAAAuC,EAAAvC,GAAA+C,QAAAK,aAAAL,EAAAK,YAAA,CACAD,EAAAZ,EAAAvC,EACA,OAOA,MAJAmD,IACAZ,EAAAc,KAAAF,EAAA,GAAA5B,GAAAX,KAAAkB,OAAAiB,IAEAI,EAAAX,QAAAO,EAAAO,MAAAX,EAAAI,EAAAO,MAAAV,EAAAD,EAAAC,EAAAG,EAAAO,MAAAC,MAAAR,EAAAO,MAAAE,SACA,GAGAtC,EAAAM,UAAAiC,aAAA,SAAA9C,GACA,IAAAA,EAAA+C,iBAAA,CACA,GAAAC,GAAA/C,KAAAgD,cACAjD,GAAAkD,QAAAC,aACAH,EAAA7D,EACA6D,EAAAI,EACAJ,EAAAK,EACAL,EAAAM,EACAN,EAAAO,GAAAvD,EAAAwD,WACAR,EAAAS,GAAAzD,EAAAwD,YAIA,IAAA,GADAE,GAAAzD,KAAA2B,SACAvC,EAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACAqE,EAAArE,GAAAyD,aAAA9C,IAIAO,EAAAM,UAAA8C,YAAA,SAAA3D,GACA,GACA4D,IADA5D,EAAA6D,GACA7D,EAAA8D,QAAAC,KAAAC,UAAA/D,KAAAoB,WAOA,IANArB,EAAAiE,kBAAAjE,EAAA8D,QAAAC,MACA/D,EAAAkE,WAAAN,GAEA3D,KAAAkE,WAAAlE,KAAAkE,YAAA,GAAAhE,MAAAiE,OACApE,EAAAqE,oBAAAC,iBAAAC,KAAAtE,KAAAkE,YAAAK,OAAAvE,KAAAgD,gBACAW,EAAAa,SAAAH,iBAAArE,KAAAkE,WAAAO,SAAA,GACAzE,KAAAoB,UAAA,CACA,GAAAsD,GAAA1E,KAAA2E,WAAA3E,KAAA2E,aAAA,EAAA,EACAD,GAAA,GAAA1E,KAAAkE,WAAAhF,GAAA,EAAA,EAAA,GACAwF,EAAA,GAAA1E,KAAAkE,WAAAb,EAAA,EAAA,EAAA,EACAM,GAAAa,SAAAI,WAAAF,CACAf,GAAAa,SAAAK,gBAAAC,KAAAC,IAAA/E,KAAAgD,eAAA9D,GAAAa,EAAAwD,WAKA,IAAA,GADAE,IAFAE,EAAAa,SAAAQ,eAAAjF,EAAA8D,QAAAC,KAAA7D,SAEAD,KAAA2B,UACAvC,EAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACAqE,EAAArE,GAAAsE,YAAA3D,EAAAC,KAAAoB,YAIAd,EAAAM,UAAAqE,WAAA,SAAAC,GACA,GAAAzB,GAAAzD,KAAA2B,QACA,IAAA3B,KAAAyB,oBAAAgC,EAAA9D,OACA,OAAA,CAEA,KAAA,GAAAP,GAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACA,GAAAqE,EAAArE,GAAAqC,oBAAAgC,EAAArE,GAAA+F,UAAAxF,QACAuF,GAAAzB,EAAArE,GAAAgG,QACA,OAAA,CAGA,QAAA,GAGA9E,EAAAM,UAAAyE,YAAA,WACA,GAAA5B,GAAAzD,KAAA2B,QACA3B,MAAAyB,mBAAAgC,EAAA9D,MACA,KAAA,GAAAP,GAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACAqE,EAAArE,GAAAqC,mBAAAgC,EAAArE,GAAA+F,UAAAxF,QAIAE,EAAAJ,QAAAa,IDaGgF,kBAAkB,IAAIC,GAAG,SAASpG,EAAQU,EAAOJ,GE7IpD,QAAA+F,GAAAtE,GACAhB,KAAAuF,SAAAjF,MAAAR,KAAAS,WACAT,KAAAqB,EAAArB,KAAAkB,OAAAA,EAGAsE,EAAA5E,UAAAC,OAAAC,OAAAZ,KAAAuF,SAAA7E,WACA4E,EAAA5E,UAAAG,YAAAyE,EACAA,EAAA5E,UAAAiC,aAAA,SAAA9C,GACA,GAAAgD,GAAA,IACAhD,GAAA+C,mBACAC,EAAA/C,KAAA0F,UAAA1C,eACAhD,KAAA0F,UAAA1C,eAAA9C,KAAAiE,OAAAwB,UAEA5F,EAAA8D,QAAA+B,SAAAC,OAAA7F,MACAD,EAAA+C,mBACA9C,KAAA0F,UAAA1C,eAAAD,GAEAhD,EAAAkD,QAAA6C,YAAA,GAEAN,EAAA5E,UAAA8C,YAAA,SAAA3D,GACAC,KAAA+F,OAAAhG,EAAA6D,GAAAoC,MACAhG,KAAAiG,OAAA,GACA/F,KAAAuF,SAAA7E,UAAA8C,YAAAhE,KAAAM,KAAAD,IAGAyF,EAAA5E,UAAAqE,WAAA,SAAAC,GACA,OAAA,GAGAM,EAAA5E,UAAAyE,YAAA,aAGAxF,EAAAJ,QAAA+F,OFgJMU,GAAG,SAAS/G,EAAQU,EAAOJ,GGhLjC,QAAAkB,GAAAO,EAAAiB,GACAjC,KAAAiG,cAAA3F,MAAAR,KAAAS,WACAT,KAAAU,WAAAF,MAAAR,KAAAS,WAGAE,EAAAC,UAAAC,OAAAC,OAAAZ,KAAAiG,cAAAvF,WACAD,EAAAC,UAAAG,YAAAJ,EAEAA,EAAAC,UAAAF,WAAA,SAAAQ,EAAAiB,GACAnC,KAAAmC,QAAAA,EACAnC,KAAAqB,EAAArB,KAAAkB,OAAAA,EACAlB,KAAAmF,aACAnF,KAAAoG,SAAA,GAGAzF,EAAAC,UAAAc,MAAA,WACA1B,KAAAmF,UAAAxF,OAAA,EACAK,KAAAyB,mBAAA,EACAzB,KAAAoF,SAAA,GAGAzE,EAAAC,UAAAiC,aAAA,SAAA9C,GACA,GAAAC,KAAAmC,SAAAnC,KAAAmC,QAAAkE,MAEA,IAAA,GADAC,GAAAtG,KAAAmF,UACA/F,EAAA,EAAAP,EAAAyH,EAAA3G,OAAAd,EAAAO,EAAAA,GAAA,EAAA,CACA,GAAAmH,GAAAD,EAAAlH,GAAAoH,EAAAF,EAAAlH,EAAA,GACAqH,EAAAH,EAAAlH,EAAA,GAAAsH,EAAAJ,EAAAlH,EAAA,GACAuH,EAAAL,EAAAlH,EAAA,GACAwH,EAAAN,EAAAlH,EAAA,EACAmH,IAAAD,EAAAlH,EAAA,GAAAW,EAAA8D,QAAAC,KAAA7D,SAAA,GACAuG,GAAAF,EAAAlH,EAAA,GAAAW,EAAA8D,QAAAC,KAAA7D,SAAA,GACAF,EAAAkD,QAAA4D,UAAA7G,KAAAmC,QAAAK,YAAAsE,OAAAP,EAAAC,EAAAG,EAAAC,EAAAH,EAAAC,EAAAC,EAAAC,KAIAjG,EAAAC,UAAAgB,QAAA,SAAA3C,EAAA6C,EAAAC,EAAAC,EAAAC,EAAAC,EAAA6E,EAAAC,GACA,GAAAC,GAAAjH,KAAAmF,SAEA,IADAnF,KAAAoF,QAAApF,KAAAoF,SAAA2B,EAAA,GAAAC,EAAA,EACA/E,GAAAC,EACA+E,EAAAxE,KAAAxD,GACAgI,EAAAxE,KAAAX,GACAmF,EAAAxE,KAAAV,GACAkF,EAAAxE,KAAAT,GACAiF,EAAAxE,KAAAR,GACAgF,EAAAxE,KAAAP,GACA+E,EAAAxE,KAAA,EAAAsE,GACAE,EAAAxE,KAAA,EAAAuE,OAGA,IAAA/E,EAAAC,IAAA,EACA,IAAA,GAAA9C,GAAA,EAAA6C,EAAAC,EAAA9C,EAAAA,IACA6H,EAAAxE,KAAAxD,EAAAG,EAAA8C,GACA+E,EAAAxE,KAAAX,GACAmF,EAAAxE,KAAAV,EAAA3C,EAAA8C,GACA+E,EAAAxE,KAAAT,GACAiF,EAAAxE,KAAAP,GACA+E,EAAAxE,KAAAP,GACA+E,EAAAxE,KAAA,EAAAsE,GACAE,EAAAxE,KAAA,EAAAuE,OAIAC,GAAAxE,KAAAxD,GACAgI,EAAAxE,KAAAX,GACAmF,EAAAxE,KAAAV,GACAkF,EAAAxE,KAAAT,GACAiF,EAAAxE,KAAAR,GACAgF,EAAAxE,KAAAP,GACA+E,EAAAxE,KAAA,EAAAsE,GACAE,EAAAxE,KAAA,EAAAuE,IAKArG,EAAAC,UAAA8C,YAAA,SAAA3D,EAAAqB,GACA,GAAApB,KAAAmC,SAAAnC,KAAAmC,QAAAkE,MAAA,CACA,GAAAC,GAAAtG,KAAAmF,SACA,IAAA,IAAAmB,EAAA3G,OAAA,CAEA,GAAAmE,GAAA/D,EAAA8D,QAAAC,KACAF,EAAA7D,EAAA6D,GACAD,EAAAG,EAAAC,UAAA3C,GACAe,EAAAnC,KAAAmC,QAAAK,WACAzC,GAAAmH,YAAA/E,EAAA,EACA,IAAAgF,GAAAnH,KAAAoH,UAAApH,KAAAoH,YAAA,EAAA,EACAD,GAAA,GAAA,EAAAhF,EAAAQ,MACAwE,EAAA,GAAA,EAAAhF,EAAAS,OACAe,EAAAa,SAAA6C,YAAAF,CAEA,IAAAG,GAAAxD,EAAAyD,MAAAvH,KAAAwH,KACAF,KACAA,EAAAxD,EAAA2D,SAAArG,GACApB,KAAAwH,KAAAF,EAAAtB,GACAhG,KAAA0H,SAAA,KACA1H,KAAAyB,mBAAA,EAEA6F,GAAAK,IAAAC,MACAN,GAAAA,EAAAA,GAEAA,EAAAM,MACA,IAAAC,GAAAvB,EAAA3G,OAAA,EAAAgE,EAAAmE,WACA,IAAA9H,KAAAyB,oBAAAoG,EAAA,CACA7H,KAAAyB,mBAAAoG,CACA,IAAAE,GAAApE,EAAAqE,OAAAH,CACA,KAAA7H,KAAA0H,UAAA1H,KAAA0H,SAAAO,WAAAF,EAAA,CAGA,IADA,GAAAG,GAAAvE,EAAAqE,OACAD,EAAAG,GACAA,GAAA,CAEAlI,MAAA0H,SAAA,GAAAS,aAAAD,GACAlI,KAAAoI,QAAA,GAAAC,cAAArI,KAAA0H,UACA1H,KAAAsI,OAAA,GAAAC,aAAAvI,KAAA0H,UACAJ,EAAAkB,OAAAxI,KAAA0H,SAAA,GAAA,GAGA,GAIAtI,GAJAqJ,EAAAzI,KAAAoI,QAEAM,GAFA1I,KAAAsI,OAEA,EAGA,IAAAlH,EACA,IAAAhC,EAAA,EAAAA,EAAAkH,EAAA3G,OAAAP,GAAA,EACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,GACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,GACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,GACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,GACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,GACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,GACAqJ,EAAAC,KAAApC,EAAAlH,EAAA,OAEA,CACA+C,EAAAQ,MAAAR,EAAAS,MAGA,KAAAxD,EAAA,EAAAA,EAAAkH,EAAA3G,OAAAP,GAAA,EAAA,CACA,GAAA2C,GAAAuE,EAAAlH,EAAA,GAAA4C,EAAAsE,EAAAlH,EAAA,GACAuH,EAAAL,EAAAlH,EAAA,GAAAwH,EAAAN,EAAAlH,EAAA,GACAH,EAAAqH,EAAAlH,GAAA0C,EAAAwE,EAAAlH,EAAA,GACA2H,EAAAT,EAAAlH,EAAA,GAAA4H,EAAAV,EAAAlH,EAAA,EACAqJ,GAAAC,KAAA3G,EACA0G,EAAAC,KAAA1G,EACAyG,EAAAC,KAAAzJ,EACAwJ,EAAAC,KAAA5G,EACA2G,EAAAC,KAAA3B,EACA0B,EAAAC,KAAA1B,EACAyB,EAAAC,KAAA3G,EAAA4E,EACA8B,EAAAC,KAAA1G,EACAyG,EAAAC,KAAAzJ,EAAA0H,EACA8B,EAAAC,KAAA5G,EACA2G,EAAAC,KAAA3B,EACA0B,EAAAC,KAAA1B,EACAyB,EAAAC,KAAA3G,EAAA4E,EACA8B,EAAAC,KAAA1G,EAAA4E,EACA6B,EAAAC,KAAAzJ,EAAA0H,EACA8B,EAAAC,KAAA5G,EAAA8E,EACA6B,EAAAC,KAAA3B,EACA0B,EAAAC,KAAA1B,EACAyB,EAAAC,KAAA3G,EACA0G,EAAAC,KAAA1G,EACAyG,EAAAC,KAAAzJ,EACAwJ,EAAAC,KAAA5G,EACA2G,EAAAC,KAAA3B,EACA0B,EAAAC,KAAA1B,EACAyB,EAAAC,KAAA3G,EAAA4E,EACA8B,EAAAC,KAAA1G,EAAA4E,EACA6B,EAAAC,KAAAzJ,EAAA0H,EACA8B,EAAAC,KAAA5G,EAAA8E,EACA6B,EAAAC,KAAA3B,EACA0B,EAAAC,KAAA1B,EACAyB,EAAAC,KAAA3G,EACA0G,EAAAC,KAAA1G,EAAA4E,EACA6B,EAAAC,KAAAzJ,EACAwJ,EAAAC,KAAA5G,EAAA8E,EACA6B,EAAAC,KAAA3B,EACA0B,EAAAC,KAAA1B,GAIAM,EAAAkB,OAAAC,EAAA,GAAA,GAMArH,EACAwC,EAAA+E,WAAA/E,EAAAgF,OAAA,EAAAf,GAEAjE,EAAA+E,WAAA/E,EAAAiF,UAAA,EAAAhB,MAGAhI,EAAAJ,QAAAkB,OHmLMmI,GAAG,SAAS3J,EAAQU,EAAOJ,GIlXjC,QAAAsJ,GAAAnF,GAEA1D,KAAA8I,OAAAtJ,KAAAM,KAAA4D,GAEA,wBACA,kCACA,wBAEA,iCACA,4BACA,+BAEA,8BAEA,mBACA,0FACA,mFACA,KACAqF,KAAA,OAEA,wBACA,8BACA,8BACA,mBACA,wDACA,KACAA,KAAA,OAEAjJ,KAAAkJ,SAAA,EACAlJ,KAAA8H,YAAA,EACA9H,KAAAgI,OAAA,EAAAhI,KAAAkJ,SAGAH,EAAAnI,UAAAC,OAAAC,OAAAZ,KAAA8I,OAAApI,WACAmI,EAAAnI,UAAAG,YAAAgI,EACAA,EAAAnI,UAAAuI,UAAA,SAAApJ,EAAAuH,GACA,GAAA1D,GAAA7D,EAAA6D,EACA,OAAA7D,GAAAoJ,YACAC,SAAApJ,KAAAqJ,aACAC,aAAAhC,EAAAtH,KAAAuJ,WAAAC,gBAAA5F,EAAA6F,OAAA,EAAAzJ,KAAAgI,OAAA,GACAsB,aAAAhC,EAAAtH,KAAAuJ,WAAAG,MAAA9F,EAAA6F,OAAA,EAAAzJ,KAAAgI,OAAA,KAGAnI,EAAAJ,QAAAsJ,OJqXMY,GAAG,SAASxK,EAAQU,EAAOJ,GKhajC,QAAAmK,GAAAhG,GACA1D,KAAA8I,OAAAtJ,KAAAM,KAAA4D,GAEA,kCACA,wBAEA,iCACA,4BACA,+BACA,iCAEA,8BACA,uBAEA,mBACA,0GACA,+CACA,sFACA,sBACA,KACAqF,KAAA,OAEA,8BACA,uBACA,4BAEA,8BACA,2BAEA,mBACA,+BACA,sHACA,mHACA,KACAA,KAAA,OAEAjJ,KAAAkJ,SAAA,EACAlJ,KAAA8H,YAAA,EACA9H,KAAAgI,OAAA,EAAAhI,KAAAkJ,SAGAU,EAAAhJ,UAAAC,OAAAC,OAAAZ,KAAA8I,OAAApI,WACAgJ,EAAAhJ,UAAAG,YAAA6I,EACAA,EAAAhJ,UAAAuI,UAAA,SAAApJ,EAAAuH,GACA,GAAA1D,GAAA7D,EAAA6D,EACA,OAAA7D,GAAAoJ,YACAC,SAAApJ,KAAAqJ,aACAC,aAAAhC,EAAAtH,KAAAuJ,WAAAC,gBAAA5F,EAAA6F,OAAA,EAAAzJ,KAAAgI,OAAA,GACAsB,aAAAhC,EAAAtH,KAAAuJ,WAAAM,MAAAjG,EAAA6F,OAAA,EAAAzJ,KAAAgI,OAAA,KAGAnI,EAAAJ,QAAAmK,OLmaME,GAAG,SAAS3K,EAAQU,EAAOJ,GM7cjC,QAAAsK,GAAAhK,GACAG,KAAA8J,eAAAtK,KAAAM,KAAAD,GACAC,KAAAiK,OACAjK,KAAAkK,cAAA,EACAlK,KAAAC,UAAA,EAAA,GACAD,KAAAmK,QAAA,GAAAC,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAdA,GAAArB,GAAA5J,EAAA,oBACAyK,EAAAzK,EAAA,qBAgBA4K,GAAAnJ,UAAAC,OAAAC,OAAAZ,KAAA8J,eAAApJ,WACAmJ,EAAAnJ,UAAAG,YAAAgJ,EACAA,EAAAM,gBAAA,EAEAN,EAAAnJ,UAAA0J,gBAAA,WACA,GAAA1G,GAAA5D,KAAAD,SAAA6D,EACA5D,MAAAuK,WAAA,GAAAxB,GAAAnF,GACA5D,KAAAwK,aAAA,GAAAZ,GAAAhG,GACA5D,KAAAqJ,YAAAnJ,KAAAuK,OAAAC,SAAAC,kBAAA/G,EAAA5D,KAAAmK,QAAAvG,EAAAgH,aACA5K,KAAAuK,WAAAlB,YAAArJ,KAAAqJ,YACArJ,KAAAwK,aAAAnB,YAAArJ,KAAAqJ,YACArJ,KAAAiK,QAIAF,EAAAnJ,UAAAiK,WAAA,WACA,GAAAC,GAAAC,KAAAD,MACAE,EAAAF,EAAA,GACA,IAAA9K,KAAAkK,cAAAc,GACAhL,KAAAkK,cAAAY,EAAA,CACA9K,KAAAkK,cAAAY,CACA,IAAAb,GAAAjK,KAAAiK,GACA,KAAA,GAAAgB,KAAAhB,GACAA,EAAAgB,GAAAC,eAAAF,GACAhL,KAAAmL,SAAAF,KAMAlB,EAAAnJ,UAAAwK,MAAA,WACApL,KAAAD,SAAAsL,MAAAC,aAAApL,KAAAqL,YAAAC,SAIAzB,EAAAnJ,UAAA2G,MAAA,SAAAvB,GACAhG,KAAA6K,YACA,IAAAvD,GAAAtH,KAAAiK,IAAAjE,EACA,OAAAsB,IACAA,EAAAmE,eAAAV,KAAAD,MACAxD,GAEA,MAGAyC,EAAAnJ,UAAA6G,SAAA,SAAArG,GACA,GAAA4E,KAAA+D,EAAAM,gBACA1G,EAAA3D,KAAA+D,UAAA3C,GACAwC,EAAA5D,KAAAD,SAAA6D,GACA0D,EAAApH,KAAAuK,OAAAC,SAAAgB,mBAAA9H,EAAA,KAAAA,EAAA+H,aACAC,GACA5F,GAAAA,EACAsB,GAAAA,EACAK,IAAAhE,EAAAwF,UAAAnJ,KAAAD,SAAAuH,GACA4D,eAAAH,KAAAD,MACA1J,UAAAA,EACAuC,OAAAA,EAGA,OADA3D,MAAAiK,IAAAjE,GAAA4F,EACAA,GAGA7B,EAAAnJ,UAAAuK,SAAA,SAAAnF,GACAhG,KAAAiK,IAAAjE,KACAhG,KAAAiK,IAAAjE,GAAAsB,GAAAuE,UACA7L,KAAAiK,IAAAjE,GAAA2B,IAAAkE,gBACA7L,MAAAiK,IAAAjE,KAIA+D,EAAAnJ,UAAAmD,UAAA,SAAA3C,GACA,MAAAA,GAAApB,KAAAwK,aAAAxK,KAAAuK,YAGAR,EAAAnJ,UAAAiL,QAAA,WACA3L,KAAA8J,eAAApJ,UAAAiL,QAAAnM,KAAAM,MACAA,KAAAuK,WAAAsB,UACA7L,KAAAwK,aAAAqB,UACA7L,KAAAuK,WAAA,KACAvK,KAAAwK,aAAA,MAGAtK,KAAA4L,cAAA1L,eAAA,OAAA2J,GAEAlK,EAAAJ,QAAAsK,INydGgC,mBAAmB,EAAEC,qBAAqB,IAAIC,GAAG,SAAS9M,EAAQU,EAAOJ,GO9jB5E,QAAAyM,KACAlM,KAAAU,WAAAF,MAAAR,KAAAS,WAGAyL,EAAAtL,UAAAC,OAAAC,OAAAZ,KAAAK,UAAAK,WACAsL,EAAAtL,UAAAF,WAAA,SAAAyL,EAAAjL,GACAhB,KAAAK,UAAAC,MAAAR,KAAAS,WACAT,KAAAmM,QAAAA,EACAnM,KAAAqB,EAAAH,GAGAgL,EAAAtL,UAAAc,MAAA,WAEA,IAAA,GADA+B,GAAAzD,KAAA2B,SACAvC,EAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACAqE,EAAArE,GAAAsC,OACA1B,MAAAoM,gBAAA,GAGAF,EAAAtL,UAAAyL,aAAA,WACA,GAAAF,GAAAnM,KAAAmM,QACA1I,EAAAzD,KAAA2B,SACA2K,EAAAtM,KAAAoM,iBAAA3I,EAAA9D,MACAK,MAAAoM,gBAAA3I,EAAA9D,MACA,IAAA4M,GAAAvM,KAAAwM,aACAC,EAAAzM,KAAA0M,WACAH,KACAA,EAAAvM,KAAAwM,aAAAG,SAAAC,cAAA,UACAH,EAAAzM,KAAA0M,YAAA,GAAAxM,MAAAC,eAAA,IAAA,KAAA0M,KAAAN,IACAE,EAAAxJ,QAAAwJ,EAAAK,YACAL,EAAA3J,kBAAA,GAEAyJ,EAAA5J,OAAAwJ,EAAAY,aACAR,EAAA3J,QAAAuJ,EAAAa,eACAT,EAAA5J,MAAAwJ,EAAAY,YACAR,EAAA3J,OAAAuJ,EAAAa,aACAV,GAAA,EAEA,IAAAlN,EACA,KAAAkN,EACA,IAAAlN,EAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACA,GAAAqE,EAAArE,GAAA6F,WAAAjF,KAAAiN,qBAAAd,EAAAnH,gBAAA,CACAsH,GAAA,CACA,OAKA,GADAtM,KAAAiN,oBAAAd,EAAAnH,eACAsH,EAKA,IAJAH,EAAAe,eACAf,EAAAe,cAAAT,GAEAA,EAAAxJ,QAAAkK,UAAA,EAAA,EAAAZ,EAAA5J,MAAA4J,EAAA3J,QACAxD,EAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IACAqE,EAAArE,GAAAiG,cACA5B,EAAArE,GAAAyD,aAAA4J,EAIA,KADAzM,KAAAoN,eAAApN,KAAAgD,eACA5D,EAAA,EAAAA,EAAAqE,EAAA9D,OAAAP,IAAA,CACAY,KAAAoN,eAAA3J,EAAArE,GAAA4D,cACA,SAIAkJ,EAAAtL,UAAAiC,aAAA,SAAA9C,GACAC,KAAAqM,cACA,IAAAtJ,GAAA/C,KAAAoN,cACArN,GAAAkD,QAAAC,aACAH,EAAA7D,EACA6D,EAAAI,EACAJ,EAAAK,EACAL,EAAAM,EACAN,EAAAO,GAAAvD,EAAAwD,WACAR,EAAAS,GAAAzD,EAAAwD,WAEAvD,MAAAmM,OACApM,GAAAkD,QAAA4D,UAAA7G,KAAAwM,aAAA,EAAA,IAGA3M,EAAAJ,QAAAyM,OPikBMmB,GAAG,SAASlO,EAAQU,EAAOJ,GQhpBjCS,KAAAiM,SACAD,OAAA/M,EAAA,YACAqG,cAAArG,EAAA,mBACAwB,cAAAxB,EAAA,mBACAmB,uBAAAnB,EAAA,4BACAW,mBAAAX,EAAA,wBACA4K,aAAA5K,EAAA,mBAGAU,EAAAJ,QAAAS,KAAAiM,URmpBGmB,uBAAuB,EAAEC,2BAA2B,EAAEC,kBAAkB,EAAElI,kBAAkB,EAAEmI,iBAAiB,EAAEC,WAAW,SAAS","file":"pixi-tilemap.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nfunction CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n\n},{}],2:[function(require,module,exports){\nvar RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    for (var i=0;i<bitmaps.length;i++)\r\n        this.addChild(new RectTileLayer(this.zIndex, bitmaps[i]));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].texture)\r\n        this.children[num].addRect(u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null;\r\n    for (var i=0;i<children.length; i++) {\r\n        if (children[i].texture.baseTexture == texture.baseTexture) {\r\n            layer = children[i];\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n    }\r\n    layer.addRect(texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n\n},{\"./RectTileLayer\":4}],3:[function(require,module,exports){\nfunction GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n\n},{}],4:[function(require,module,exports){\nfunction RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, texture) {\r\n    this.texture = texture;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!this.texture || !this.texture.valid) return;\r\n    var points = this.pointsBuf;\r\n    for (var i = 0, n = points.length; i < n; i += 8) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        renderer.context.drawImage(this.texture.baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n    } else {\r\n        //horizontal line on squares\r\n        if (tileWidth % tileHeight === 0) {\r\n            for (var i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    if (!this.texture || !this.texture.valid) return;\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var texture = this.texture.baseTexture;\r\n    renderer.bindTexture(texture, 0);\r\n    var tempSize = this._tempSize = (this._tempSize || [0, 0]);\r\n    tempSize[0] = 1.0 / texture.width;\r\n    tempSize[1] = 1.0 / texture.height;\r\n    shader.uniforms.samplerSize = tempSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 8 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var i;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 8) {\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0];\r\n                arr[sz++] = points[i + 1];\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n            }\r\n        } else {\r\n            var ww = texture.width, hh = texture.height;\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 8) {\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i], v = points[i+1];\r\n                var animX = points[i+6], animY = points[i+7];\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n\n},{}],5:[function(require,module,exports){\nfunction RectTileShader(gl)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        [\r\n            'precision lowp float;',\r\n            'attribute vec4 aVertexPosition;',\r\n            'attribute vec2 aAnim;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n            'uniform vec2 samplerSize;',\r\n            'uniform vec2 animationFrame;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy, 1.0)).xy, 0.0, 1.0);',\r\n            '   vTextureCoord = (aVertexPosition.zw + aAnim * animationFrame ) * samplerSize;',\r\n            '}'\r\n        ].join('\\n'),\r\n        [\r\n            'precision lowp float;',\r\n            'varying vec2 vTextureCoord;',\r\n            'uniform sampler2D uSampler;',\r\n            'void main(void){',\r\n            '   gl_FragColor = texture2D(uSampler, vTextureCoord);',\r\n            '}'\r\n        ].join('\\n')\r\n    );\r\n    this.vertSize = 6;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n\n},{}],6:[function(require,module,exports){\nfunction SquareTileShader(gl) {\r\n    PIXI.Shader.call(this, gl,\r\n        [\r\n            'attribute vec4 aVertexPosition;',\r\n            'attribute vec3 aSize;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n            'uniform vec2 samplerSize;',\r\n            'uniform vec2 animationFrame;',\r\n            'uniform float projectionScale;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying float vSize;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy + aSize.x * 0.5, 1.0)).xy, 0.0, 1.0);',\r\n            '   gl_PointSize = aSize.x * projectionScale;',\r\n            '   vTextureCoord = (aVertexPosition.zw + aSize.yz * animationFrame ) * samplerSize;',\r\n            '   vSize = aSize.x;',\r\n            '}'\r\n        ].join(\"\\n\"),\r\n        [\r\n            'varying vec2 vTextureCoord;',\r\n            'varying float vSize;',\r\n            'uniform vec2 samplerSize;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n            'uniform vec2 pointScale;',\r\n\r\n            'void main(void){',\r\n            '   float margin = 0.5/vSize;',\r\n            '   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));',\r\n            '   gl_FragColor = texture2D(uSampler, ((clamped-0.5) * pointScale + 0.5) * vSize * samplerSize + vTextureCoord);',\r\n            '}'\r\n        ].join('\\n')\r\n    );\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n\n},{}],7:[function(require,module,exports){\nvar RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader');\r\n\r\n/**\r\n * The default vertex shader source\r\n *\r\n * @static\r\n * @constant\r\n */\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    this.rectShader = new RectTileShader(gl);\r\n    this.squareShader = new SquareTileShader(gl);\r\n    this.indexBuffer = PIXI.glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n};\r\n\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n\n},{\"./RectTileShader\":5,\"./SquareTileShader\":6}],8:[function(require,module,exports){\nfunction ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n\n},{}],9:[function(require,module,exports){\nPIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n\n},{\"./CanvasTileRenderer\":1,\"./CompositeRectTileLayer\":2,\"./GraphicsLayer\":3,\"./RectTileLayer\":4,\"./TileRenderer\":7,\"./ZLayer\":8}]},{},[9])\n\n","var RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    for (var i=0;i<bitmaps.length;i++)\r\n        this.addChild(new RectTileLayer(this.zIndex, bitmaps[i]));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].texture)\r\n        this.children[num].addRect(u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null;\r\n    for (var i=0;i<children.length; i++) {\r\n        if (children[i].texture.baseTexture == texture.baseTexture) {\r\n            layer = children[i];\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n    }\r\n    layer.addRect(texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n","function GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n","function RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, texture) {\r\n    this.texture = texture;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!this.texture || !this.texture.valid) return;\r\n    var points = this.pointsBuf;\r\n    for (var i = 0, n = points.length; i < n; i += 8) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        renderer.context.drawImage(this.texture.baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n    } else {\r\n        //horizontal line on squares\r\n        if (tileWidth % tileHeight === 0) {\r\n            for (var i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    if (!this.texture || !this.texture.valid) return;\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var texture = this.texture.baseTexture;\r\n    renderer.bindTexture(texture, 0);\r\n    var tempSize = this._tempSize = (this._tempSize || [0, 0]);\r\n    tempSize[0] = 1.0 / texture.width;\r\n    tempSize[1] = 1.0 / texture.height;\r\n    shader.uniforms.samplerSize = tempSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 8 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var i;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 8) {\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0];\r\n                arr[sz++] = points[i + 1];\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n            }\r\n        } else {\r\n            var ww = texture.width, hh = texture.height;\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 8) {\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i], v = points[i+1];\r\n                var animX = points[i+6], animY = points[i+7];\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n","function RectTileShader(gl)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        [\r\n            'precision lowp float;',\r\n            'attribute vec4 aVertexPosition;',\r\n            'attribute vec2 aAnim;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n            'uniform vec2 samplerSize;',\r\n            'uniform vec2 animationFrame;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy, 1.0)).xy, 0.0, 1.0);',\r\n            '   vTextureCoord = (aVertexPosition.zw + aAnim * animationFrame ) * samplerSize;',\r\n            '}'\r\n        ].join('\\n'),\r\n        [\r\n            'precision lowp float;',\r\n            'varying vec2 vTextureCoord;',\r\n            'uniform sampler2D uSampler;',\r\n            'void main(void){',\r\n            '   gl_FragColor = texture2D(uSampler, vTextureCoord);',\r\n            '}'\r\n        ].join('\\n')\r\n    );\r\n    this.vertSize = 6;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n","function SquareTileShader(gl) {\r\n    PIXI.Shader.call(this, gl,\r\n        [\r\n            'attribute vec4 aVertexPosition;',\r\n            'attribute vec3 aSize;',\r\n\r\n            'uniform mat3 projectionMatrix;',\r\n            'uniform vec2 samplerSize;',\r\n            'uniform vec2 animationFrame;',\r\n            'uniform float projectionScale;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying float vSize;',\r\n\r\n            'void main(void){',\r\n            '   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy + aSize.x * 0.5, 1.0)).xy, 0.0, 1.0);',\r\n            '   gl_PointSize = aSize.x * projectionScale;',\r\n            '   vTextureCoord = (aVertexPosition.zw + aSize.yz * animationFrame ) * samplerSize;',\r\n            '   vSize = aSize.x;',\r\n            '}'\r\n        ].join(\"\\n\"),\r\n        [\r\n            'varying vec2 vTextureCoord;',\r\n            'varying float vSize;',\r\n            'uniform vec2 samplerSize;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n            'uniform vec2 pointScale;',\r\n\r\n            'void main(void){',\r\n            '   float margin = 0.5/vSize;',\r\n            '   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));',\r\n            '   gl_FragColor = texture2D(uSampler, ((clamped-0.5) * pointScale + 0.5) * vSize * samplerSize + vTextureCoord);',\r\n            '}'\r\n        ].join('\\n')\r\n    );\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n","var RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader');\r\n\r\n/**\r\n * The default vertex shader source\r\n *\r\n * @static\r\n * @constant\r\n */\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    this.rectShader = new RectTileShader(gl);\r\n    this.squareShader = new SquareTileShader(gl);\r\n    this.indexBuffer = PIXI.glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n};\r\n\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n","function ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n","PIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n"],"sourceRoot":"./"}