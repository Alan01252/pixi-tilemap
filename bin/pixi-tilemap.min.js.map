{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/CanvasTileRenderer.js","pixi-tilemap.min.js","src/CompositeRectTileLayer.js","src/GraphicsLayer.js","src/RectTileLayer.js","src/RectTileShader.js","src/SquareTileShader.js","src/TileRenderer.js","src/ZLayer.js","src/index","src/shaderGenerator.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","CanvasTileRenderer","renderer","this","tileAnim","PIXI","CanvasRenderer","registerPlugin","2","CompositeRectTileLayer","Container","apply","arguments","initialize","RectTileLayer","prototype","Object","create","constructor","updateTransform","displayObjectUpdateTransform","zIndex","bitmaps","useSquare","z","shadowColor","Float32Array","setBitmaps","removeChildren","addChild","modificationMarker","clear","children","addRect","num","v","x","y","tileWidth","tileHeight","textures","addFrame","texture","Texture","fromImage","layer","ind","tex","j","baseTexture","child","push","frame","width","height","renderCanvas","dontUseTransform","wt","worldTransform","context","setTransform","b","c","d","tx","resolution","ty","layers","renderWebGL","shader","gl","plugins","tile","getShader","setObjectRenderer","bindShader","_globalMat","Matrix","_activeRenderTarget","projectionMatrix","copy","append","uniforms","toArray","tempScale","_tempScale","pointScale","projectionScale","Math","abs","animationFrame","isModified","anim","pointsBuf","hasAnim","clearModify","./RectTileLayer","3","GraphicsLayer","Graphics","transform","IDENTITY","graphics","render","globalAlpha","_webGL","id","dirty","4","DisplayObject","Array","visible","_tempSize","_tempTexSize","points","fillStyle","x1","y1","x2","y2","w","h","textureId","drawImage","source","fillRect","animX","animY","pb","len","maxTextures","valid","bindTextures","vb","getVb","vbId","createVb","vbBuffer","vao","bind","vertices","vertPerQuad","vs","stride","byteLength","bk","ArrayBuffer","vbArray","vbInts","Uint32Array","upload","shiftU","shiftV","arr","sz","drawArrays","POINTS","TRIANGLES","5","RectTileShader","Shader","shaderGenerator","generateFragmentSrc","vertSize","fillSamplers","createVao","addIndex","indexBuffer","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","aAnim","aTextureId","./shaderGenerator","6","SquareTileShader","aSize","7","TileRenderer","ObjectRenderer","vbs","lastTimeCheck","indices","Uint16Array","glCore","vbAutoincrement","onContextChange","rectShader","squareShader","GLBuffer","createIndexBuffer","STATIC_DRAW","glTextures","boundSprites","initBounds","tempCanvas","document","createElement","glt","GLTexture","premultiplyAlpha","enableWrapClamp","enableLinearScaling","bs","spr","Sprite","position","_hackSubImage","sprite","baseTex","texSubImage2D","TEXTURE_2D","format","type","bounds","glts","bindTexture","_activeTextureLocation","checkLeaks","now","Date","old","key","lastTimeAccess","removeVb","start","state","setBlendMode","BLEND_MODES","NORMAL","lastAccessTime","createVertexBuffer","STREAM_DRAW","stuff","destroy","WebGLRenderer","./RectTileShader","./SquareTileShader","8","ZLayer","tilemap","_previousLayers","cacheIfDirty","modified","buf","canvasBuffer","tempRender","_tempRender","view","rootContext","_layerWidth","_layerHeight","_lastAnimationFrame","_hackRenderer","clearRect","layerTransform","9","./CanvasTileRenderer","./CompositeRectTileLayer","./GraphicsLayer","./TileRenderer","./ZLayer","10","sampleValues","uSamplers","samplerSize","uSamplerSize","fragmentSrc","replace","generateSampleSrc","src"],"mappings":"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","file":"pixi-tilemap.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nfunction CanvasTileRenderer(renderer) {\r\n    this.renderer = renderer;\r\n    this.tileAnim = [0, 0];\r\n}\r\n\r\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\r\n\r\nmodule.exports = CanvasTileRenderer;\r\n\n},{}],2:[function(require,module,exports){\nvar RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    this.shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    this.addChild(new RectTileLayer(this.zIndex, bitmaps));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].textures)\r\n        this.children[num].addRect(0, u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null, ind = 0;\r\n    for (var i=0;i<children.length; i++) {\r\n        var tex = children[i].textures;\r\n        for (var j=0;j < tex.length;j++) {\r\n            if (tex[j].baseTexture == texture.baseTexture) {\r\n                layer = children[i];\r\n                ind = j;\r\n                break;\r\n            }\r\n        }\r\n        if (layer) {\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        for (i=0;i<children.length;i++) {\r\n            var child = children[i];\r\n            if (child.textures.length < 16) {\r\n                layer = child;\r\n                ind = child.textures.length;\r\n                child.textures.push(texture);\r\n            }\r\n        }\r\n        if (!layer) {\r\n            children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n            ind = 0;\r\n        }\r\n    }\r\n    layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    shader.uniforms.shadowColor = this.shadowColor;\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n\n},{\"./RectTileLayer\":4}],3:[function(require,module,exports){\nfunction GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n\n},{}],4:[function(require,module,exports){\nfunction RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, textures) {\r\n    if (!textures) {\r\n        textures = [];\r\n    } else if (!(textures instanceof Array) && textures.baseTexture) {\r\n        textures = [textures];\r\n    }\r\n    this.textures = textures;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n    this._tempSize = new Float32Array([0, 0]);\r\n    this._tempTexSize = 1;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (this.textures.length === 0) return;\r\n    var points = this.pointsBuf;\r\n    renderer.context.fillStyle = '#000000';\r\n    for (var i = 0, n = points.length; i < n; i += 9) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        var textureId = points[i+8];\r\n        if (textureId >= 0) {\r\n            renderer.context.drawImage(this.textures[textureId].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n        } else {\r\n            renderer.context.globalAlpha = 0.5;\r\n            renderer.context.fillRect(x2, y2, w, h);\r\n            renderer.context.globalAlpha = 1;\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (textureId, u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureId);\r\n    } else {\r\n        var i;\r\n        if (tileWidth % tileHeight === 0) {\r\n            //horizontal line on squares\r\n            for (i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else if (tileHeight % tileWidth === 0) {\r\n            //vertical line on squares\r\n            for (i=0;i<tileHeight/tileWidth;i++) {\r\n                pb.push(u);\r\n                pb.push(v + i * tileWidth);\r\n                pb.push(x);\r\n                pb.push(y + i * tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n            pb.push(textureId);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var textures = this.textures;\r\n    if (textures.length === 0) return;\r\n    var len = textures.length;\r\n    if (this._tempTexSize < shader.maxTextures) {\r\n        this._tempTexSize = shader.maxTextures;\r\n        this._tempSize = new Float32Array(2*shader.maxTextures);\r\n    }\r\n    // var samplerSize = this._tempSize;\r\n    for (var i=0;i<len;i++) {\r\n        if (!textures[i] || !textures[i].valid) return;\r\n        var texture = textures[i].baseTexture;\r\n        // samplerSize[i * 2] = 1.0 / texture.width;\r\n        // samplerSize[i * 2 + 1] = 1.0 / texture.height;\r\n    }\r\n    tile.bindTextures(renderer, textures);\r\n    // shader.uniforms.uSamplerSize = samplerSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 9 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var textureId, shiftU, shiftV;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0] + shiftU;\r\n                arr[sz++] = points[i + 1] + shiftV;\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n                arr[sz++] = textureId;\r\n            }\r\n        } else {\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i] + shiftU, v = points[i+1] + shiftV;\r\n                var animX = points[i+6], animY = points[i+7];\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n\n},{}],5:[function(require,module,exports){\nvar shaderGenerator = require('./shaderGenerator');\r\n\r\nfunction RectTileShader(gl, maxTextures)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 animationFrame;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nvoid main(void){\\n\\n   vec2 textureCoord = vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 6 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n\n},{\"./shaderGenerator\":10}],6:[function(require,module,exports){\nvar shaderGenerator = require('./shaderGenerator');\r\n\r\n\r\nfunction SquareTileShader(gl, maxTextures) {\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nattribute float aSize;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 samplerSize;\\n\\nuniform vec2 animationFrame;\\n\\nuniform float projectionScale;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\\n\\n   gl_PointSize = aSize * projectionScale;\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n   vSize = aSize;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nuniform vec2 pointScale;\\n\\nvoid main(void){\\n\\n   float margin = 1.0/vSize;\\n\\n   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));\\n\\n   vec2 textureCoord = ((clamped-0.5) * pointScale + 0.5) * vSize + vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 8;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 5 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 7 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n\n},{\"./shaderGenerator\":10}],7:[function(require,module,exports){\nvar RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/*\r\n* Renderer for square and rectangle tiles.\r\n* Squares cannot be rotated, skewed.\r\n* For container with squares, scale.x must be equals to scale.y, matrix.a to matrix.d\r\n* Rectangles do not care about that.\r\n*\r\n* @class\r\n* @memberof PIXI.tilemap\r\n* @extends PIXI.ObjectRenderer\r\n* @param renderer {PIXI.WebGLRenderer} The renderer this sprite batch works for.\r\n*/\r\n\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.maxTextures = 4;\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    var maxTextures = this.maxTextures;\r\n    this.rectShader = new RectTileShader(gl, maxTextures);\r\n    this.squareShader = new SquareTileShader(gl, maxTextures);\r\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n    this.glTextures = [];\r\n    this.boundSprites = [];\r\n    this.initBounds();\r\n};\r\n\r\nTileRenderer.prototype.initBounds = function() {\r\n    var gl = this.renderer.gl;\r\n    var tempCanvas = document.createElement('canvas');\r\n    tempCanvas.width = 2048;\r\n    tempCanvas.height = 2048;\r\n    // tempCanvas.getContext('2d').clearRect(0, 0, 2048, 2048);\r\n    for (var i=0;i<this.maxTextures; i++) {\r\n        var glt = new glCore.GLTexture(gl, 2048, 2048);\r\n        glt.premultiplyAlpha = true;\r\n        glt.upload(tempCanvas);\r\n        glt.enableWrapClamp();\r\n        glt.enableLinearScaling();\r\n        this.glTextures.push(glt);\r\n        var bs = [];\r\n        for (var j=0;j<4;j++) {\r\n            var spr = new PIXI.Sprite();\r\n            spr.position.x = 1024 * (j & 1);\r\n            spr.position.y = 1024 * (j >> 1);\r\n            bs.push(spr);\r\n        }\r\n        this.boundSprites.push(bs);\r\n    }\r\n};\r\n\r\nglCore.GLTexture.prototype._hackSubImage = function(sprite) {\r\n    this.bind();\r\n    var gl = this.gl;\r\n    var baseTex = sprite.texture.baseTexture;\r\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, sprite.position.x, sprite.position.y, this.format, this.type, baseTex.source);\r\n};\r\n\r\nTileRenderer.prototype.bindTextures = function(renderer, textures) {\r\n    var bounds = this.boundSprites;\r\n    var glts = this.glTextures;\r\n    var len = textures.length;\r\n    var maxTextures = this.maxTextures;\r\n    if (len >= 4 * maxTextures) {\r\n        return;\r\n    }\r\n    var i;\r\n    for (i=0;i<len;i++) {\r\n        var texture = textures[i];\r\n        renderer.bindTexture(texture);\r\n        if (!texture || !textures[i].valid) continue;\r\n        var bs = bounds[i >> 2][i & 3];\r\n        if (bs.texture !== texture) {\r\n            bs.texture = texture;\r\n            var glt = glts[ i >> 2 ];\r\n            glt._hackSubImage(bs);\r\n        }\r\n    }\r\n    for (i = 0; i < maxTextures; i++) {\r\n        glts[i].bind(i);\r\n    }\r\n    renderer._activeTextureLocation = maxTextures - 1;\r\n};\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n\n},{\"./RectTileShader\":5,\"./SquareTileShader\":6}],8:[function(require,module,exports){\nfunction ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n\n},{}],9:[function(require,module,exports){\nPIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n\n},{\"./CanvasTileRenderer\":1,\"./CompositeRectTileLayer\":2,\"./GraphicsLayer\":3,\"./RectTileLayer\":4,\"./TileRenderer\":7,\"./ZLayer\":8}],10:[function(require,module,exports){\nvar shaderGenerator = {\r\n    fillSamplers: function(shader, maxTextures) {\r\n        var sampleValues = [];\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            sampleValues[i] = i;\r\n        }\r\n        shader.bind();\r\n        shader.uniforms.uSamplers = sampleValues;\r\n\r\n        var samplerSize = [];\r\n        for (i = 0; i < maxTextures; i++) {\r\n            samplerSize.push(1.0 / 2048);\r\n            samplerSize.push(1.0 / 2048);\r\n        }\r\n        shader.uniforms.uSamplerSize = samplerSize;\r\n    },\r\n    generateFragmentSrc: function(maxTextures, fragmentSrc) {\r\n        return fragmentSrc.replace(/%count%/gi, maxTextures)\r\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\r\n    },\r\n    generateSampleSrc: function(maxTextures) {\r\n        var src = '';\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        src += 'if(vTextureId <= -1.0) {';\r\n        src += '\\n\\tcolor = shadowColor;';\r\n        src += '\\n}';\r\n\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            src += '\\nelse ';\r\n\r\n            if(i < maxTextures-1)\r\n            {\r\n                src += 'if(vTextureId == ' + i + '.0)';\r\n            }\r\n\r\n            src += '\\n{';\r\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\r\n            src += '\\n}';\r\n        }\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        return src;\r\n    }\r\n};\r\n\r\nmodule.exports = shaderGenerator;\r\n\n},{}]},{},[9])\n\n","var RectTileLayer = require('./RectTileLayer');\r\n\r\nfunction CompositeRectTileLayer() {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\r\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\r\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\r\n\r\n//can be initialized multiple times\r\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\r\n    this.z = this.zIndex = zIndex;\r\n    this.useSquare = useSquare;\r\n    this.shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\r\n    if (bitmaps) {\r\n        this.setBitmaps(bitmaps);\r\n    }\r\n};\r\n\r\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\r\n    this.removeChildren();\r\n    this.addChild(new RectTileLayer(this.zIndex, bitmaps));\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clear = function () {\r\n    for (var i=0;i<this.children.length;i++)\r\n        this.children[i].clear();\r\n    this.modificationMarker = 0;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\r\n    if (this.children[num] && this.children[num].textures)\r\n        this.children[num].addRect(0, u, v, x, y, tileWidth, tileHeight);\r\n};\r\n\r\n/**\r\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\r\n * @param texture\r\n * @param x\r\n * @param y\r\n * @returns {boolean}\r\n */\r\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\r\n    if (typeof texture === \"string\") {\r\n        texture = PIXI.Texture.fromImage(texture);\r\n    }\r\n    var children = this.children;\r\n    var layer = null, ind = 0;\r\n    for (var i=0;i<children.length; i++) {\r\n        var tex = children[i].textures;\r\n        for (var j=0;j < tex.length;j++) {\r\n            if (tex[j].baseTexture == texture.baseTexture) {\r\n                layer = children[i];\r\n                ind = j;\r\n                break;\r\n            }\r\n        }\r\n        if (layer) {\r\n            break;\r\n        }\r\n    }\r\n    if (!layer) {\r\n        for (i=0;i<children.length;i++) {\r\n            var child = children[i];\r\n            if (child.textures.length < 16) {\r\n                layer = child;\r\n                ind = child.textures.length;\r\n                child.textures.push(texture);\r\n            }\r\n        }\r\n        if (!layer) {\r\n            children.push(layer = new RectTileLayer(this.zIndex, texture));\r\n            ind = 0;\r\n        }\r\n    }\r\n    layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\r\n    return true;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (!renderer.dontUseTransform) {\r\n        var wt = this.worldTransform;\r\n        renderer.context.setTransform(\r\n            wt.a,\r\n            wt.b,\r\n            wt.c,\r\n            wt.d,\r\n            wt.tx * renderer.resolution,\r\n            wt.ty * renderer.resolution\r\n        );\r\n    }\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderCanvas(renderer);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\r\n    var gl = renderer.gl;\r\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\r\n    renderer.setObjectRenderer(renderer.plugins.tile);\r\n    renderer.bindShader(shader);\r\n    //TODO: dont create new array, please\r\n    this._globalMat = this._globalMat || new PIXI.Matrix();\r\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\r\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\r\n    shader.uniforms.shadowColor = this.shadowColor;\r\n    if (this.useSquare) {\r\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\r\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\r\n        tempScale[1] = this._globalMat.d < 0?1:-1;\r\n        var ps = shader.uniforms.pointScale = tempScale;\r\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\r\n    }\r\n    var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\r\n    //shader.syncUniform(shader.uniforms.animationFrame);\r\n    var layers = this.children;\r\n    for (var i = 0; i < layers.length; i++)\r\n        layers[i].renderWebGL(renderer, this.useSquare);\r\n};\r\n\r\n\r\nCompositeRectTileLayer.prototype.isModified = function(anim) {\r\n    var layers = this.children;\r\n    if (this.modificationMarker != layers.length) {\r\n        return true;\r\n    }\r\n    for (var i=0;i<layers.length;i++) {\r\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\r\n            anim && layers[i].hasAnim) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nCompositeRectTileLayer.prototype.clearModify = function() {\r\n    var layers = this.children;\r\n    this.modificationMarker = layers.length;\r\n    for (var i = 0; i < layers.length; i++) {\r\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\r\n    }\r\n};\r\n\r\nmodule.exports = CompositeRectTileLayer;\r\n","function GraphicsLayer(zIndex) {\r\n    PIXI.Graphics.apply(this, arguments);\r\n    this.z = this.zIndex = zIndex;\r\n}\r\n\r\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\r\nGraphicsLayer.prototype.constructor = GraphicsLayer;\r\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\r\n    var wt = null;\r\n    if (renderer.dontUseTransform) {\r\n        wt = this.transform.worldTransform;\r\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\r\n    }\r\n    renderer.plugins.graphics.render(this);\r\n    if (renderer.dontUseTransform) {\r\n        this.transform.worldTransform = wt;\r\n    }\r\n    renderer.context.globalAlpha = 1.0;\r\n};\r\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\r\n    if (!this._webGL[renderer.gl.id])\r\n        this.dirty = true;\r\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\r\n};\r\n\r\nGraphicsLayer.prototype.isModified = function(anim) {\r\n    return false;\r\n};\r\n\r\nGraphicsLayer.prototype.clearModify = function() {\r\n};\r\n\r\nmodule.exports = GraphicsLayer;\r\n","function RectTileLayer(zIndex, texture) {\r\n    PIXI.DisplayObject.apply(this, arguments);\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\r\nRectTileLayer.prototype.constructor = RectTileLayer;\r\n\r\nRectTileLayer.prototype.initialize = function(zIndex, textures) {\r\n    if (!textures) {\r\n        textures = [];\r\n    } else if (!(textures instanceof Array) && textures.baseTexture) {\r\n        textures = [textures];\r\n    }\r\n    this.textures = textures;\r\n    this.z = this.zIndex = zIndex;\r\n    this.pointsBuf = [];\r\n    this.visible = false;\r\n    this._tempSize = new Float32Array([0, 0]);\r\n    this._tempTexSize = 1;\r\n};\r\n\r\nRectTileLayer.prototype.clear = function () {\r\n    this.pointsBuf.length = 0;\r\n    this.modificationMarker = 0;\r\n    this.hasAnim = false;\r\n};\r\n\r\nRectTileLayer.prototype.renderCanvas = function (renderer) {\r\n    if (this.textures.length === 0) return;\r\n    var points = this.pointsBuf;\r\n    renderer.context.fillStyle = '#000000';\r\n    for (var i = 0, n = points.length; i < n; i += 9) {\r\n        var x1 = points[i], y1 = points[i+1];\r\n        var x2 = points[i+2], y2 = points[i+3];\r\n        var w = points[i+4];\r\n        var h = points[i+5];\r\n        x1 += points[i+6] * renderer.plugins.tile.tileAnim[0];\r\n        y1 += points[i+7] * renderer.plugins.tile.tileAnim[1];\r\n        var textureId = points[i+8];\r\n        if (textureId >= 0) {\r\n            renderer.context.drawImage(this.textures[textureId].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\r\n        } else {\r\n            renderer.context.globalAlpha = 0.5;\r\n            renderer.context.fillRect(x2, y2, w, h);\r\n            renderer.context.globalAlpha = 1;\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.addRect = function (textureId, u, v, x, y, tileWidth, tileHeight, animX, animY) {\r\n    var pb = this.pointsBuf;\r\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\r\n    if (tileWidth == tileHeight) {\r\n        pb.push(u);\r\n        pb.push(v);\r\n        pb.push(x);\r\n        pb.push(y);\r\n        pb.push(tileWidth);\r\n        pb.push(tileHeight);\r\n        pb.push(animX | 0);\r\n        pb.push(animY | 0);\r\n        pb.push(textureId);\r\n    } else {\r\n        var i;\r\n        if (tileWidth % tileHeight === 0) {\r\n            //horizontal line on squares\r\n            for (i=0;i<tileWidth/tileHeight;i++) {\r\n                pb.push(u + i * tileHeight);\r\n                pb.push(v);\r\n                pb.push(x + i * tileHeight);\r\n                pb.push(y);\r\n                pb.push(tileHeight);\r\n                pb.push(tileHeight);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else if (tileHeight % tileWidth === 0) {\r\n            //vertical line on squares\r\n            for (i=0;i<tileHeight/tileWidth;i++) {\r\n                pb.push(u);\r\n                pb.push(v + i * tileWidth);\r\n                pb.push(x);\r\n                pb.push(y + i * tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(tileWidth);\r\n                pb.push(animX | 0);\r\n                pb.push(animY | 0);\r\n                pb.push(textureId);\r\n            }\r\n        } else {\r\n            //ok, ok, lets use rectangle. but its not working with square shader yet\r\n            pb.push(u);\r\n            pb.push(v);\r\n            pb.push(x);\r\n            pb.push(y);\r\n            pb.push(tileWidth);\r\n            pb.push(tileHeight);\r\n            pb.push(animX | 0);\r\n            pb.push(animY | 0);\r\n            pb.push(textureId);\r\n        }\r\n    }\r\n};\r\n\r\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\r\n    var points = this.pointsBuf;\r\n    if (points.length === 0) return;\r\n\r\n    var tile = renderer.plugins.tile;\r\n    var gl = renderer.gl;\r\n    var shader = tile.getShader(useSquare);\r\n    var textures = this.textures;\r\n    if (textures.length === 0) return;\r\n    var len = textures.length;\r\n    if (this._tempTexSize < shader.maxTextures) {\r\n        this._tempTexSize = shader.maxTextures;\r\n        this._tempSize = new Float32Array(2*shader.maxTextures);\r\n    }\r\n    // var samplerSize = this._tempSize;\r\n    for (var i=0;i<len;i++) {\r\n        if (!textures[i] || !textures[i].valid) return;\r\n        var texture = textures[i].baseTexture;\r\n        // samplerSize[i * 2] = 1.0 / texture.width;\r\n        // samplerSize[i * 2 + 1] = 1.0 / texture.height;\r\n    }\r\n    tile.bindTextures(renderer, textures);\r\n    // shader.uniforms.uSamplerSize = samplerSize;\r\n    //lost context! recover!\r\n    var vb = tile.getVb(this.vbId);\r\n    if (!vb) {\r\n        vb = tile.createVb(useSquare);\r\n        this.vbId = vb.id;\r\n        this.vbBuffer = null;\r\n        this.modificationMarker = 0;\r\n    }\r\n    var vao = vb.vao.bind();\r\n    vb = vb.vb;\r\n    //if layer was changed, re-upload vertices\r\n    vb.bind();\r\n    var vertices = points.length / 9 * shader.vertPerQuad;\r\n    if (this.modificationMarker != vertices) {\r\n        this.modificationMarker = vertices;\r\n        var vs = shader.stride * vertices;\r\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\r\n            //!@#$ happens, need resize\r\n            var bk = shader.stride;\r\n            while (bk < vs) {\r\n                bk *= 2;\r\n            }\r\n            this.vbBuffer = new ArrayBuffer(bk);\r\n            this.vbArray = new Float32Array(this.vbBuffer);\r\n            this.vbInts = new Uint32Array(this.vbBuffer);\r\n            vb.upload(this.vbBuffer, 0, true);\r\n        }\r\n\r\n        var arr = this.vbArray, ints = this.vbInts;\r\n        //upload vertices!\r\n        var sz = 0;\r\n        //var tint = 0xffffffff;\r\n        var textureId, shiftU, shiftV;\r\n        if (useSquare) {\r\n            for (i = 0; i < points.length; i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                arr[sz++] = points[i + 2];\r\n                arr[sz++] = points[i + 3];\r\n                arr[sz++] = points[i + 0] + shiftU;\r\n                arr[sz++] = points[i + 1] + shiftV;\r\n                arr[sz++] = points[i + 4];\r\n                arr[sz++] = points[i + 6];\r\n                arr[sz++] = points[i + 7];\r\n                arr[sz++] = textureId;\r\n            }\r\n        } else {\r\n            //var tint = 0xffffffff;\r\n            var tint = -1;\r\n            for (i = 0;i<points.length;i += 9) {\r\n                textureId = (points[i+8] >> 2);\r\n                shiftU = 1024 * (points[i+8] & 1);\r\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\r\n                var x = points[i+2], y = points[i+3];\r\n                var w = points[i+4], h = points[i+5];\r\n                var u = points[i] + shiftU, v = points[i+1] + shiftV;\r\n                var animX = points[i+6], animY = points[i+7];\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x + w;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u + w;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n                arr[sz++] = x;\r\n                arr[sz++] = y + h;\r\n                arr[sz++] = u;\r\n                arr[sz++] = v + h;\r\n                arr[sz++] = animX;\r\n                arr[sz++] = animY;\r\n                arr[sz++] = textureId;\r\n            }\r\n        }\r\n        // if (vs > this.vbArray.length/2 ) {\r\n        vb.upload(arr, 0, true);\r\n        // } else {\r\n        //     var view = arr.subarray(0, vs);\r\n        //     vb.upload(view, 0);\r\n        // }\r\n    }\r\n    if (useSquare)\r\n        gl.drawArrays(gl.POINTS, 0, vertices);\r\n    else\r\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\r\n};\r\n\r\nmodule.exports = RectTileLayer;\r\n","var shaderGenerator = require('./shaderGenerator');\r\n\r\nfunction RectTileShader(gl, maxTextures)\r\n{\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 animationFrame;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nvoid main(void){\\n\\n   vec2 textureCoord = vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 7;\r\n    this.vertPerQuad = 6;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nRectTileShader.prototype.constructor = RectTileShader;\r\nRectTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 6 * 4);\r\n};\r\n\r\nmodule.exports = RectTileShader;\r\n","var shaderGenerator = require('./shaderGenerator');\r\n\r\n\r\nfunction SquareTileShader(gl, maxTextures) {\r\n    PIXI.Shader.call(this, gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\n\\nattribute vec2 aTextureCoord;\\n\\nattribute vec2 aAnim;\\n\\nattribute float aTextureId;\\n\\nattribute float aSize;\\n\\nuniform mat3 projectionMatrix;\\n\\nuniform vec2 samplerSize;\\n\\nuniform vec2 animationFrame;\\n\\nuniform float projectionScale;\\n\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nvoid main(void){\\n\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\\n\\n   gl_PointSize = aSize * projectionScale;\\n\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n\\n   vTextureId = aTextureId;\\n\\n   vSize = aSize;\\n\\n}\\n\\n\",\r\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\n\\nvarying float vSize;\\n\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\n\\nuniform sampler2D uSamplers[%count%];\\n\\nuniform vec2 uSamplerSize[%count%];\\n\\nuniform vec2 pointScale;\\n\\nvoid main(void){\\n\\n   float margin = 1.0/vSize;\\n\\n   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));\\n\\n   vec2 textureCoord = ((clamped-0.5) * pointScale + 0.5) * vSize + vTextureCoord;\\n\\n   vec4 color;\\n\\n   %forloop%\\n\\n   gl_FragColor = color;\\n\\n}\\n\\n\")\r\n    );\r\n    this.maxTextures = maxTextures;\r\n    this.vertSize = 8;\r\n    this.vertPerQuad = 1;\r\n    this.stride = this.vertSize * 4;\r\n    shaderGenerator.fillSamplers(this, this.maxTextures);\r\n}\r\n\r\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\r\nSquareTileShader.prototype.constructor = SquareTileShader;\r\nSquareTileShader.prototype.createVao = function (renderer, vb) {\r\n    var gl = renderer.gl;\r\n    return renderer.createVao()\r\n        .addIndex(this.indexBuffer)\r\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\r\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\r\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4)\r\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 5 * 4)\r\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 7 * 4);\r\n};\r\n\r\nmodule.exports = SquareTileShader;\r\n","var RectTileShader = require('./RectTileShader'),\r\n    SquareTileShader = require('./SquareTileShader'),\r\n    glCore = PIXI.glCore;\r\n\r\n/*\r\n* Renderer for square and rectangle tiles.\r\n* Squares cannot be rotated, skewed.\r\n* For container with squares, scale.x must be equals to scale.y, matrix.a to matrix.d\r\n* Rectangles do not care about that.\r\n*\r\n* @class\r\n* @memberof PIXI.tilemap\r\n* @extends PIXI.ObjectRenderer\r\n* @param renderer {PIXI.WebGLRenderer} The renderer this sprite batch works for.\r\n*/\r\n\r\nfunction TileRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n    this.vbs = {};\r\n    this.lastTimeCheck = 0;\r\n    this.tileAnim = [0, 0];\r\n    this.maxTextures = 4;\r\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n}\r\n\r\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nTileRenderer.prototype.constructor = TileRenderer;\r\nTileRenderer.vbAutoincrement = 0;\r\n\r\nTileRenderer.prototype.onContextChange = function() {\r\n    var gl = this.renderer.gl;\r\n    var maxTextures = this.maxTextures;\r\n    this.rectShader = new RectTileShader(gl, maxTextures);\r\n    this.squareShader = new SquareTileShader(gl, maxTextures);\r\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\r\n    this.rectShader.indexBuffer = this.indexBuffer;\r\n    this.squareShader.indexBuffer = this.indexBuffer;\r\n    this.vbs = {};\r\n    this.glTextures = [];\r\n    this.boundSprites = [];\r\n    this.initBounds();\r\n};\r\n\r\nTileRenderer.prototype.initBounds = function() {\r\n    var gl = this.renderer.gl;\r\n    var tempCanvas = document.createElement('canvas');\r\n    tempCanvas.width = 2048;\r\n    tempCanvas.height = 2048;\r\n    // tempCanvas.getContext('2d').clearRect(0, 0, 2048, 2048);\r\n    for (var i=0;i<this.maxTextures; i++) {\r\n        var glt = new glCore.GLTexture(gl, 2048, 2048);\r\n        glt.premultiplyAlpha = true;\r\n        glt.upload(tempCanvas);\r\n        glt.enableWrapClamp();\r\n        glt.enableLinearScaling();\r\n        this.glTextures.push(glt);\r\n        var bs = [];\r\n        for (var j=0;j<4;j++) {\r\n            var spr = new PIXI.Sprite();\r\n            spr.position.x = 1024 * (j & 1);\r\n            spr.position.y = 1024 * (j >> 1);\r\n            bs.push(spr);\r\n        }\r\n        this.boundSprites.push(bs);\r\n    }\r\n};\r\n\r\nglCore.GLTexture.prototype._hackSubImage = function(sprite) {\r\n    this.bind();\r\n    var gl = this.gl;\r\n    var baseTex = sprite.texture.baseTexture;\r\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, sprite.position.x, sprite.position.y, this.format, this.type, baseTex.source);\r\n};\r\n\r\nTileRenderer.prototype.bindTextures = function(renderer, textures) {\r\n    var bounds = this.boundSprites;\r\n    var glts = this.glTextures;\r\n    var len = textures.length;\r\n    var maxTextures = this.maxTextures;\r\n    if (len >= 4 * maxTextures) {\r\n        return;\r\n    }\r\n    var i;\r\n    for (i=0;i<len;i++) {\r\n        var texture = textures[i];\r\n        renderer.bindTexture(texture);\r\n        if (!texture || !textures[i].valid) continue;\r\n        var bs = bounds[i >> 2][i & 3];\r\n        if (bs.texture !== texture) {\r\n            bs.texture = texture;\r\n            var glt = glts[ i >> 2 ];\r\n            glt._hackSubImage(bs);\r\n        }\r\n    }\r\n    for (i = 0; i < maxTextures; i++) {\r\n        glts[i].bind(i);\r\n    }\r\n    renderer._activeTextureLocation = maxTextures - 1;\r\n};\r\n\r\nTileRenderer.prototype.checkLeaks = function() {\r\n    var now = Date.now();\r\n    var old = now - 10000;\r\n    if (this.lastTimeCheck < old ||\r\n        this.lastTimeCheck > now) {\r\n        this.lastTimeCheck = now;\r\n        var vbs = this.vbs;\r\n        for (var key in vbs) {\r\n            if (vbs[key].lastTimeAccess < old) {\r\n                this.removeVb(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.start = function() {\r\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\r\n    //sorry, nothing\r\n};\r\n\r\nTileRenderer.prototype.getVb = function(id) {\r\n    this.checkLeaks();\r\n    var vb = this.vbs[id];\r\n    if (vb) {\r\n        vb.lastAccessTime = Date.now();\r\n        return vb;\r\n    }\r\n    return null;\r\n};\r\n\r\nTileRenderer.prototype.createVb = function(useSquare) {\r\n    var id = ++TileRenderer.vbAutoincrement;\r\n    var shader = this.getShader(useSquare);\r\n    var gl = this.renderer.gl;\r\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\r\n    var stuff = {\r\n        id: id,\r\n        vb: vb,\r\n        vao: shader.createVao(this.renderer, vb),\r\n        lastTimeAccess: Date.now(),\r\n        useSquare: useSquare,\r\n        shader: shader\r\n    };\r\n    this.vbs[id] = stuff;\r\n    return stuff;\r\n};\r\n\r\nTileRenderer.prototype.removeVb = function(id) {\r\n    if (this.vbs[id]) {\r\n        this.vbs[id].vb.destroy();\r\n        this.vbs[id].vao.destroy();\r\n        delete this.vbs[id];\r\n    }\r\n};\r\n\r\nTileRenderer.prototype.getShader = function(useSquare) {\r\n    return useSquare ? this.squareShader : this.rectShader;\r\n};\r\n\r\nTileRenderer.prototype.destroy = function () {\r\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\r\n    this.rectShader.destroy();\r\n    this.squareShader.destroy();\r\n    this.rectShader = null;\r\n    this.squareShader = null;\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\r\n\r\nmodule.exports = TileRenderer;\r\n","function ZLayer() {\r\n    this.initialize.apply(this, arguments);\r\n}\r\n\r\nZLayer.prototype = Object.create(PIXI.Container.prototype);\r\nZLayer.prototype.initialize = function(tilemap, zIndex) {\r\n    PIXI.Container.apply(this, arguments);\r\n    this.tilemap = tilemap;\r\n    this.z = zIndex;\r\n};\r\n\r\nZLayer.prototype.clear = function() {\r\n    var layers = this.children;\r\n    for (var i=0; i<layers.length; i++)\r\n        layers[i].clear();\r\n    this._previousLayers = 0;\r\n};\r\n\r\nZLayer.prototype.cacheIfDirty = function() {\r\n    var tilemap = this.tilemap;\r\n    var layers = this.children;\r\n    var modified = this._previousLayers != layers.length;\r\n    this._previousLayers = layers.length;\r\n    var buf = this.canvasBuffer;\r\n    var tempRender = this._tempRender;\r\n    if (!buf) {\r\n        buf = this.canvasBuffer = document.createElement('canvas');\r\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\r\n        tempRender.context = tempRender.rootContext;\r\n        tempRender.dontUseTransform = true;\r\n    }\r\n    if (buf.width != tilemap._layerWidth ||\r\n        buf.height != tilemap._layerHeight) {\r\n        buf.width = tilemap._layerWidth;\r\n        buf.height = tilemap._layerHeight;\r\n        modified = true;\r\n    }\r\n    var i;\r\n    if (!modified) {\r\n        for (i=0;i<layers.length;i++) {\r\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\r\n                modified = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    this._lastAnimationFrame = tilemap.animationFrame;\r\n    if (modified) {\r\n        if (tilemap._hackRenderer) {\r\n            tilemap._hackRenderer(tempRender);\r\n        }\r\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\r\n        for (i=0;i<layers.length;i++) {\r\n            layers[i].clearModify();\r\n            layers[i].renderCanvas(tempRender);\r\n        }\r\n    }\r\n    this.layerTransform = this.worldTransform;\r\n    for (i=0;i<layers.length;i++) {\r\n        this.layerTransform = layers[i].worldTransform;\r\n        break;\r\n    }\r\n};\r\n\r\nZLayer.prototype.renderCanvas = function(renderer) {\r\n    this.cacheIfDirty();\r\n    var wt = this.layerTransform;\r\n    renderer.context.setTransform(\r\n        wt.a,\r\n        wt.b,\r\n        wt.c,\r\n        wt.d,\r\n        wt.tx * renderer.resolution,\r\n        wt.ty * renderer.resolution\r\n    );\r\n    var tilemap = this.tilemap;\r\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\r\n};\r\n\r\nmodule.exports = ZLayer;\r\n","PIXI.tilemap = {\r\n    ZLayer: require('./ZLayer'),\r\n    GraphicsLayer: require('./GraphicsLayer'),\r\n    RectTileLayer: require('./RectTileLayer'),\r\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\r\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\r\n    TileRenderer: require('./TileRenderer')\r\n};\r\n\r\nmodule.exports = PIXI.tilemap;\r\n","var shaderGenerator = {\r\n    fillSamplers: function(shader, maxTextures) {\r\n        var sampleValues = [];\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            sampleValues[i] = i;\r\n        }\r\n        shader.bind();\r\n        shader.uniforms.uSamplers = sampleValues;\r\n\r\n        var samplerSize = [];\r\n        for (i = 0; i < maxTextures; i++) {\r\n            samplerSize.push(1.0 / 2048);\r\n            samplerSize.push(1.0 / 2048);\r\n        }\r\n        shader.uniforms.uSamplerSize = samplerSize;\r\n    },\r\n    generateFragmentSrc: function(maxTextures, fragmentSrc) {\r\n        return fragmentSrc.replace(/%count%/gi, maxTextures)\r\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\r\n    },\r\n    generateSampleSrc: function(maxTextures) {\r\n        var src = '';\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        src += 'if(vTextureId <= -1.0) {';\r\n        src += '\\n\\tcolor = shadowColor;';\r\n        src += '\\n}';\r\n\r\n        for (var i = 0; i < maxTextures; i++)\r\n        {\r\n            src += '\\nelse ';\r\n\r\n            if(i < maxTextures-1)\r\n            {\r\n                src += 'if(vTextureId == ' + i + '.0)';\r\n            }\r\n\r\n            src += '\\n{';\r\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\r\n            src += '\\n}';\r\n        }\r\n\r\n        src += '\\n';\r\n        src += '\\n';\r\n\r\n        return src;\r\n    }\r\n};\r\n\r\nmodule.exports = shaderGenerator;\r\n"],"sourceRoot":"./"}